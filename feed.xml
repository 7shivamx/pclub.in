<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Club IIT Kanpur</title>
    <description>The Programming Club, IIT Kanpur
</description>
    <link>http://pclub.in/</link>
    <atom:link href="http://pclub.in/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 01 Jun 2016 21:10:04 +0000</pubDate>
    <lastBuildDate>Wed, 01 Jun 2016 21:10:04 +0000</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>Managing Processes in Linux</title>
        <description>&lt;h1 id=&quot;managing-processes-in-linux&quot;&gt;Managing Processes in Linux&lt;/h1&gt;

&lt;h3 id=&quot;the-ps-command&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ps&lt;/code&gt; command&lt;/h3&gt;
&lt;p&gt;Short for &lt;strong&gt;&lt;em&gt;process status&lt;/em&gt;&lt;/strong&gt; . Returns all &lt;em&gt;currently running processes&lt;/em&gt; running on the system.&lt;/p&gt;

&lt;p&gt;When called without arguments, information return can be a little useless.&lt;/p&gt;

&lt;p&gt;To get a more clear picture we use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -aux&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;This tells &lt;code class=&quot;highlighter-rouge&quot;&gt;ps&lt;/code&gt;  to return list of process from &lt;strong&gt;all users&lt;/strong&gt;
We can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -ef&lt;/code&gt; to view &lt;strong&gt;all running process&lt;/strong&gt;
where &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;is used to &lt;strong&gt;display all processes&lt;/strong&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; is used to &lt;strong&gt;display in full format listing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To view all running processes that belongs to a particular user, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -f -u username1,username2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We can see processes limited to a set of users by seperating the usernames by a comma()
Often &lt;code class=&quot;highlighter-rouge&quot;&gt;ps aux | grep commandname&lt;/code&gt; is used to get details of process with the given command&lt;/p&gt;

&lt;p&gt;To see all proccesses in a tree structure we use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps axjf&lt;/code&gt;
Using this we get to know the parent processes (by getting an hierarchical structure)&lt;/p&gt;

&lt;h3 id=&quot;pids&quot;&gt;PIDs&lt;/h3&gt;

&lt;p&gt;Each process is assigned a &lt;em&gt;unique&lt;/em&gt; &lt;strong&gt;Process ID (PID)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each process also has a &lt;strong&gt;Parent Process ID (PPID)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To filter your searches with a specific &lt;strong&gt;PID&lt;/strong&gt; use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -f -p PIDofProcess&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Similarly to filter by PPID use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -f --ppid PPIDofProcess&lt;/code&gt;
Also you may get pid by &lt;code class=&quot;highlighter-rouge&quot;&gt;pidof commandname&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;killing-the-process&quot;&gt;Killing the process&lt;/h3&gt;

&lt;h4 id=&quot;the-kill-command&quot;&gt;The kill command&lt;/h4&gt;

&lt;p&gt;It is used to send a signal to a process or to kill a process&lt;/p&gt;

&lt;p&gt;Basic Synatx is &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -SIGNAL PID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signals of our interest&lt;/strong&gt; : SIGTERM &amp;amp; SIGKILL&lt;/p&gt;

&lt;h4 id=&quot;sigterm&quot;&gt;SIGTERM&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kill PID&lt;/code&gt; will send a SIGTERM signal by default. The application can determine what to do once it receives a SIGTERM signal&lt;/p&gt;

&lt;p&gt;It may stop the process immediately, may stop after a delay after cleaning resources or might run endlessly&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -SIGTERM PID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -15 PID&lt;/code&gt; are same&lt;/p&gt;

&lt;h4 id=&quot;sigkill-the-super-power&quot;&gt;SIGKILL (The Super Power)&lt;/h4&gt;

&lt;p&gt;Kind of Force Kill&lt;/p&gt;

&lt;p&gt;Unlike SIGTERM , SIGKILL cannot be ignored by the process , even the process is not aware when SIGKILL signal is sent.&lt;/p&gt;

&lt;p&gt;While there are rare cases where an external influence (like waiting I/O) may be the reason of ignoring SIGKILL. But it works in most cases ! 
&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -SIGKILL PID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -9 PID&lt;/code&gt; is same&lt;/p&gt;

&lt;p&gt;Suppose your firefox is not responding and you decided to kill the process : &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -9 `pidof firefox`&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-killall-command&quot;&gt;The killall command&lt;/h4&gt;

&lt;p&gt;Too lazy to find the PID of a process ? Here have a look at the killall command&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example (killing firefox)&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;killall -9 firefox&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pkill command&lt;/strong&gt;
Almost the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;kilall&lt;/code&gt; command. The only difference being you don’t have to provide the exact process name, partial process name will do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beware you might also kill other process which you didn’t intend to kill&lt;/strong&gt;
&lt;em&gt;Example (killing firefox)&lt;/em&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;pkill firef&lt;/code&gt; will also do ! :D&lt;/p&gt;

&lt;h4 id=&quot;the-xkill-command&quot;&gt;The xkill command&lt;/h4&gt;

&lt;p&gt;If you are new to using &lt;strong&gt;LINUX&lt;/strong&gt; or hate the bash, you may do it the GUI way :P&lt;/p&gt;

&lt;p&gt;Simply  type &lt;code class=&quot;highlighter-rouge&quot;&gt;xkill&lt;/code&gt; in the terminal and it will ask you to select a window whose client you wish to kill.&lt;/p&gt;

&lt;p&gt;Fast if you have a GUI :P&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have fun killing !!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fin&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jun 2016 16:06:00 +0000</pubDate>
        <link>http://pclub.in/tutorial/2016/06/01/linuxprocess.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/2016/06/01/linuxprocess.html</guid>
        
        <category>linux</category>
        
        <category>bash</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Image Processing using OpenCV</title>
        <description>&lt;p&gt;OpenCV is the most widely used Computer Vision Library out there. It is
very powerful and offers many features suiting the needs of anyone requiring
Image Processing. This tutorial is a slightly modified version of
&lt;a href=&quot;http://students.iitk.ac.in/robocon/docs/doku.php?id=programming:image_processing_intro&quot;&gt;this&lt;/a&gt;
with a simpler method of compiling.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;The simplest possible install is always from the repositories.&lt;/p&gt;

&lt;p&gt;For Debian/Ubuntu/Mint:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libopencv-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For Other distros like Arch, you can find the respective commands on the internet.&lt;/p&gt;

&lt;p&gt;If you want python support too, you will need to install the python support by:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-opencv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The repository versions of OpenCV are usually not the latest versions and you might miss
some features.&lt;/p&gt;

&lt;p&gt;If you need specific features or a newer version of OpenCV (let’s say for python3 support),
you could look &lt;a href=&quot;milq.github.io/install-opencv-ubuntu-debian&quot;&gt;here&lt;/a&gt; for a very good guide
on compiling OpenCV from source.&lt;/p&gt;

&lt;h2 id=&quot;compiling-and-running-programs-in-c&quot;&gt;Compiling and running Programs in C++&lt;/h2&gt;

&lt;p&gt;Now that OpenCV has been installed, you might want to run a program to see if it is working
properly. I would suggest the following program:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;opencv2/opencv.hpp&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// A camera object
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;VideoCapture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// An image object
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Storing a frame from camera to image
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;cam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Do Your Operations Here
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Displaying image in a window named &quot;Image&quot;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Waiting for a keypress for 5ms
&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
      * WaitKey is very important.
      * Even if you don&#39;t want a delay/keypress you should
      * use it with minimum delay otherwise, the gui does not update
      */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Quit on pressing q
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;q&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;Q&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This simple program just takes input from your webcam and displays it in a window.
You can save it in a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;test.cpp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, in order to compile this program, execute this from the terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ -o Test /path/to/test.cpp &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;pkg-config --libs opencv&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The parameter after &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt;, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;Test&lt;/code&gt; refers to the name of the executable created after compiling.&lt;/p&gt;

&lt;p&gt;After compilation finishes (hopefully without any errors), you can run this test program with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./Test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For a more involved and complex compilation involving &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;, you can look
&lt;a href=&quot;http://students.iitk.ac.in/robocon/docs/doku.php?id=programming:image_processing_intro&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_gcc_cmake/linux_gcc_cmake.html#linux-gcc-usage&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;learning-opencv&quot;&gt;Learning OpenCV&lt;/h2&gt;

&lt;p&gt;Now that you can compile and execute OpenCV programs, you are ready to begin learning OpenCV.
The OpenCV &lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/tutorials.html&quot;&gt;tutorials&lt;/a&gt; on their website is a
good starting point. My suggested order of reading is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html#display-image&quot;&gt;Load and display an image&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/core/adding_images/adding_images.html#adding-images&quot;&gt;Adding Images&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/core/basic_geometric_drawing/basic_geometric_drawing.html#drawing-1&quot;&gt;Basic Drawing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Followed by all tutorials in the &lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/imgproc/table_of_content_imgproc/table_of_content_imgproc.html#table-of-content-imgproc&quot;&gt;Image Processing Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above order is because the initial tutorials tend to be more theoretical and focussing on the internals of OpenCV
rather than actual usage.&lt;/p&gt;

&lt;p&gt;Plus, you might not need to see all the tutorials depending upon your needs.&lt;/p&gt;

&lt;p&gt;Best of Luck developing your OpenCV application.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 May 2016 12:18:35 +0000</pubDate>
        <link>http://pclub.in/tutorial/ip/2016/05/28/opencv.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/ip/2016/05/28/opencv.html</guid>
        
        <category>ip</category>
        
        <category>tutorial</category>
        
        
        <category>tutorial</category>
        
        <category>ip</category>
        
      </item>
    
      <item>
        <title>AngularJS --- Superheroic Javascript Framework</title>
        <description>&lt;h3 id=&quot;angularjs-superheroic-javascript-framework&quot;&gt;AngularJS: Superheroic Javascript Framework&lt;/h3&gt;

&lt;p&gt;For all those who have worked with HTML and CSS, you know very well that HTML is great for declaring static documents. It doesn’t do so &lt;strong&gt;well&lt;/strong&gt; for declaring dynamic views in web-applications. Angular lets us create expressive, readable, quick to develop dynamic web pages. AngularJS framework is written in &lt;em&gt;Javascript&lt;/em&gt;. In this article, I’m going to be introducing you to very basic AngularJS, essentially talking about directives, expressions, controllers, data binding and filters.&lt;/p&gt;

&lt;h4 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Elementary&lt;/strong&gt; knowledge about HTML, CSS and Javascript.&lt;/li&gt;
  &lt;li&gt;Desire to develop responsive and dynamic web pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;angular-directives&quot;&gt;Angular Directives&lt;/h4&gt;
&lt;p&gt;Let us begin now. We’ll start with a website, albeit a simple one, that IITK’s alumni have &lt;a href=&quot;http://sid17.github.io/iitky12/#/&quot;&gt;made&lt;/a&gt;. The purpose of this website is for Y12 batch to stay in touch with batch mates and know the whereabouts of Y12 junta. A brilliant idea. We won’t be talking about the backend that is how the data is added and how the website fetches the data.&lt;/p&gt;

&lt;p&gt;Now if you right click anywhere on the site and chose inspect element, a small window opens in your browser. Find the body tag and you would find something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body ng-app=&#39;iitky12App&#39; ng-init=&#39;loadSettings()&#39; ng-controller=&#39;AppCtrl&#39; class=&#39;ng-scope&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what exactly is ng-app, ng-init and ng-controller?
These are the angular &lt;strong&gt;directives&lt;/strong&gt;. Directives are markers on a DOM (Document Object Model) element (such as an attribute, element name, comment or CSS class) that tell AngularJS’s HTML compiler to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.
Some common directives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;ng-app&lt;/strong&gt; directive tells AngularJS that the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element is the “owner” of an AngularJS application.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;ng-init&lt;/strong&gt; directive initializes AngularJS application variables.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;ng-model&lt;/strong&gt; directive binds the value of HTML controls (input, select, textarea) to application data. The ng-model directive provides a two-way binding between the model and the view.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;ng-repeat&lt;/strong&gt; directive actually clones HTML elements once for each item in a collection. Consider this like a loop for HTML elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;angular-expressions&quot;&gt;Angular Expressions&lt;/h4&gt;

&lt;p&gt;AngularJS binds data to HTML using &lt;strong&gt;Expressions&lt;/strong&gt;.AngularJS expressions can be written inside double braces:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{ expression }}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you remove the ng-app directive, HTML will display the expression as it is, without solving it.&lt;/p&gt;

&lt;h4 id=&quot;two-way-data-binding&quot;&gt;Two Way Data binding&lt;/h4&gt;

&lt;p&gt;Data binding in AngularJS is the synchronization between the model and the view. When data in the model changes, the view reflects the change, and when data in the view changes, the modelis updated as well. This happens immediately and automatically, which makes sure that the model and the view is updated at all times. ng-model directive mentioned earlier, is used for two way data binding.&lt;/p&gt;

&lt;h4 id=&quot;angular-controllers&quot;&gt;Angular Controllers&lt;/h4&gt;

&lt;p&gt;AngularJS controllers control the data of AngularJS applications. AngularJS controllers are regular JavaScript Objects. AngularJS applications are controlled by controllers. The ng-controller directive defines the application controller. Like in the site mentioned in the beginning, in the body tag &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-controller=&#39;AppCtrl&#39;&lt;/code&gt; has been used. This means AppCtrl is defined as the application controller.&lt;/p&gt;

&lt;h4 id=&quot;angular-filters&quot;&gt;Angular Filters&lt;/h4&gt;

&lt;p&gt;Perhaps again we should visit the site I mentioned earlier. Let us type CSE in the search bar ( :P ). Without taking any time, we get the results which have CSE linked to them. How does this happen?&lt;/p&gt;

&lt;p&gt;Angular Filters!! They give us the ability to format and filter the output according to our needs. So by using two way data binding we are able to use the search text entered and then filter the database using Angular Filters. We can also use filters to Order the results. Here is the link to the &lt;a href=&quot;https://docs.angularjs.org/guide/filter&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;supporting-links&quot;&gt;Supporting Links&lt;/h4&gt;

&lt;p&gt;So I guess this is enough for a start. There is much to learn, but perhaps that would be covered in another article. I present to you a few useful links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/angular-js/home/welcome&quot;&gt;Coursera Course on AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular JS Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/angular/&quot;&gt;W3Schools Tutorial on Angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 27 May 2016 19:05:23 +0000</pubDate>
        <link>http://pclub.in/angularjs/web%20development/2016/05/27/angular.html</link>
        <guid isPermaLink="true">http://pclub.in/angularjs/web%20development/2016/05/27/angular.html</guid>
        
        <category>web development</category>
        
        <category>javascript</category>
        
        <category>angularjs</category>
        
        
        <category>angularjs</category>
        
        <category>web development</category>
        
      </item>
    
      <item>
        <title>Introduction to R (Part 1)</title>
        <description>&lt;h1 id=&quot;basics-of-r&quot;&gt;Basics Of R&lt;/h1&gt;

&lt;h3 id=&quot;why-learn-r-&quot;&gt;Why Learn R ?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Free, Open Source, Cross Platform Compatible&lt;/li&gt;
  &lt;li&gt;No &lt;em&gt;Windows&lt;/em&gt;, No Doors – R runs on all the platforms. Just name it and you got it!!&lt;/li&gt;
  &lt;li&gt;R is a language evolved from the &lt;strong&gt;Language&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;S&lt;/em&gt;&lt;/strong&gt; (&lt;em&gt;created by Bell Technologies&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;I bet plotting graphs could never have been easier&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is the leading open source statistical and data analysis programming language,  as it handles and manipulates data too efficiently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;I personally recommend you to use R on &lt;em&gt;UNIX&lt;/em&gt; machines . I haven’t tried it on &lt;em&gt;Windows&lt;/em&gt; yet :P&lt;/li&gt;
  &lt;li&gt;Still not convinced ? &lt;a href=&quot;http://blog.revolutionanalytics.com/2012/07/a-big-list-of-the-things-r-can-do.html&quot;&gt;Here&lt;/a&gt; is a list of things that R can do . Keep Counting !!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Having Fun with R&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudoku&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sudoku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readSudoku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:/hard sudoku problem.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solveSudoku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wondering what the above 4 lines of code can do ? Well It can solve the &lt;strong&gt;hardest&lt;/strong&gt; &lt;em&gt;Soduku Puzzle&lt;/em&gt; ever made ! Sounds Cool ?&lt;/p&gt;

&lt;p&gt;Google &lt;strong&gt;&lt;em&gt;“Making a word cloud in R”&lt;/em&gt;&lt;/strong&gt; and see how easy it is !&lt;/p&gt;

&lt;h2 id=&quot;some-pre-requiste-knowledge&quot;&gt;Some Pre Requiste Knowledge&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;How to start R ?&lt;/li&gt;
  &lt;li&gt;Will their be an IDE where I can code ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The installation instructions for various platforms (including Non &lt;em&gt;UNIX&lt;/em&gt; products) can be found &lt;a href=&quot;https://cran.r-project.org/doc/manuals/r-release/R-admin.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After Installation. Just open your terminal and type &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-important-things-first&quot;&gt;&lt;strong&gt;Some important things first&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Whenever you are done with this language or simply wanna quit this Just type &lt;code class=&quot;highlighter-rouge&quot;&gt;q()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Whenever you are struck anywhere just type &lt;code class=&quot;highlighter-rouge&quot;&gt;help(commandname)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; is an expression language and is &lt;em&gt;case sensitive&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“R” &amp;amp; “r” are two different things&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Whenever you type an expression, the value is &lt;strong&gt;calculated , printed and lost&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;You better save the results of your expressions in a variable&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;strong&gt;assignment&lt;/strong&gt; also evaluates an expression and passes the value to a variable but the result is &lt;strong&gt;&lt;em&gt;not automatically printed&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Comments can be put anywhere starting with a Hashmark ( &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; )&lt;/li&gt;
  &lt;li&gt;Commands are separated either by a &lt;strong&gt;&lt;em&gt;semi-colon&lt;/em&gt;&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; or by a &lt;strong&gt;&lt;em&gt;newline&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If your command is incomplete R by default will give a &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; prompt and will continue to give a &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; prompt until your syntax is corrected.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;NaN&lt;/em&gt;&lt;/strong&gt; stands for Not a Number&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;programming-in-r-finally&quot;&gt;&lt;strong&gt;&lt;em&gt;Programming in R Finally&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;After reading so much about &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; . It’s time to really start coding&lt;/p&gt;

&lt;h4 id=&quot;loading-commands-in-r&quot;&gt;Loading commands in R&lt;/h4&gt;

&lt;p&gt;If you already have a .R extension file with certain commands already written , you can load it with the following syntax&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source(“nameofthefile&quot;.R)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wanna store all the outputs for a particular session ?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sink (“nameoffile”)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Simliar to a &lt;em&gt;UNIX&lt;/em&gt; terminal you can type &lt;code class=&quot;highlighter-rouge&quot;&gt;ls()&lt;/code&gt; to view all the objects you created in &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; for a particular session.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The collection of objects currently stored is called the &lt;strong&gt;&lt;em&gt;workspace&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How to remove an object ?&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;rm(objectname1,objectname2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Removing all objects&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Try to understand this command on your own.It’s pretty easy&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;data-types&quot;&gt;Data Types&lt;/h4&gt;

&lt;p&gt;Used Python ? &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; might look familiar!&lt;/p&gt;

&lt;p&gt;You can do mathematical operations like&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1+1&lt;/code&gt; : Prints 2&lt;/p&gt;

&lt;p&gt;Time to make vectors!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; : name of the variable where the vector is stored&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; &amp;lt;-&lt;/code&gt;  :  assignment operator (points in direction of the variable in which value is to be updated/stored)&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c()&lt;/code&gt; : a function used to concatenate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
Here you can see different ways to defining the same string.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1:9&lt;/code&gt; :   Creates sequence : &lt;strong&gt;1 2 3 4 5 6 7 8 9&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.5:10&lt;/code&gt; Creates sequence : &lt;strong&gt;1.5 2.5 3.5 4.5 5.5 6.5 7.5 8.5 9.5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;seq(intial,final,by,length)&lt;/code&gt; : Function use to create sequence; we can provide increment values or number of values&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rep()&lt;/code&gt;:  Function used for Replicating&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Output&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;seq(1,5,by=1.5)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;1.0 2.5 4.0&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;seq(1,5,length=9)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rep(10,10)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;10 10 10 10 10 10 10 10 10 10&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Try it yourself&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try to understand the code snippet below, guess the output and then run on &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; and check&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;operations-on-vector&quot;&gt;Operations on vector&lt;/h4&gt;

&lt;p&gt;You can do almost all possible arithemetic operations on a vector
Adding 2 vectors of same size, different size, multiplying, dividing, &lt;code class=&quot;highlighter-rouge&quot;&gt;log()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;exp()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;sin()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sum()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;length()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;var()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;mean()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;max()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;min()&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;pmin and pmax&lt;/strong&gt; :Returns parallel max and min of input values&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Example&lt;/em&gt;
Run these commands and you will get a clear idea of pmin and pmax&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To intialize a vector with a value &lt;code class=&quot;highlighter-rouge&quot;&gt;numeric()&lt;/code&gt; is used&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a &amp;lt;- numeric(10)` : a has now value 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;An Intersting Thing to Note&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try the following commands&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should now see &lt;strong&gt;NA’s&lt;/strong&gt; in the vector&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NA&lt;/strong&gt; stands for Not Available&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NA&lt;/em&gt;&lt;/strong&gt; : Missing values are represented by the symbol NA (not available)&lt;/p&gt;

&lt;p&gt;How to check for &lt;strong&gt;NA&lt;/strong&gt; in a vector ? : &lt;code class=&quot;highlighter-rouge&quot;&gt;is.na()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is.na&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;check will be &lt;strong&gt;FALSE&lt;/strong&gt; for non NA values and &lt;strong&gt;TRUE&lt;/strong&gt; for NA values&lt;/p&gt;

&lt;p&gt;How to remove &lt;strong&gt;NA&lt;/strong&gt; values ? Let’s substitute NA with -1
&lt;code class=&quot;highlighter-rouge&quot;&gt;test[is.na(test)] &amp;lt;- -1&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;logical-vectors&quot;&gt;LOGICAL VECTORS&lt;/h4&gt;
&lt;p&gt;Can contain &lt;strong&gt;TRUE&lt;/strong&gt; or &lt;strong&gt;FALSE&lt;/strong&gt;.  What else ? &lt;strong&gt;NA&lt;/strong&gt; : Don’t forget this :P&lt;/p&gt;

&lt;p&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;test &amp;lt;- 5&amp;lt;6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operations on Logical Vectors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;: For Negation&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; : for &lt;em&gt;Logical AND&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt; : for &lt;em&gt;LOGICAL OR&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;determining-the-type-of-a-variable&quot;&gt;Determining the type of a variable&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;typeof(variablename)&lt;/code&gt; : Return the type of variable
&amp;gt; Check out &lt;code class=&quot;highlighter-rouge&quot;&gt;mode()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;class()&lt;/code&gt; and read about the difference between the three&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We will discuss this in the next part :D&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&quot;mathematical-basic-operations&quot;&gt;Mathematical Basic Operations&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Syntax&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt(a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the square root of &lt;strong&gt;&lt;em&gt;a&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exp(a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Return the value of exponent of &lt;strong&gt;&lt;em&gt;a&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;log(a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the Logarithm base &lt;strong&gt;e&lt;/strong&gt; of &lt;strong&gt;&lt;em&gt;a&lt;/em&gt;&lt;/strong&gt; Try &lt;code class=&quot;highlighter-rouge&quot;&gt;log10()&lt;/code&gt; for base &lt;strong&gt;10&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns Variance of a vector which is passed as an argument&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sd()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns	Standard Deviation of a vector which is passed as an argument&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note : Providing an input to a function outside it’s domain will result in NaN &lt;strong&gt;&lt;em&gt;Not a Number&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;strings&quot;&gt;Strings&lt;/h4&gt;

&lt;p&gt;Also called &lt;strong&gt;&lt;em&gt;Character Vectors&lt;/em&gt;&lt;/strong&gt; follow &lt;strong&gt;C&lt;/strong&gt; type escape character &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Combining Characters to Numbers !&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test &amp;lt;- paste(c(&quot;X,&quot;Y&quot;),1:10,sep=&quot;&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Output should look like &lt;strong&gt;&lt;em&gt;“X1”  “Y2”  “X3”  “Y4”  “X5”  “Y6”  “X7”  “Y8”  “X9”  “Y10”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;paste()&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Function takes an arbitrary number of arguments and concatenates them one by
one into character strings.&lt;/p&gt;

  &lt;p&gt;The arguments are by default separated in the result by a single blank character, but this can be
changed by the named argument, &lt;code class=&quot;highlighter-rouge&quot;&gt;sep=&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;That’s all for the Part 1 :D , We will be posting Part 2 soon&lt;/em&gt;&lt;/strong&gt;
** We will look into arrays, factors, table, matrix, data frames in the next part **&lt;/p&gt;
</description>
        <pubDate>Wed, 25 May 2016 16:36:00 +0000</pubDate>
        <link>http://pclub.in/tutorial/2016/05/25/rpart1.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/2016/05/25/rpart1.html</guid>
        
        <category>R</category>
        
        <category>Summers</category>
        
        <category>Analytics</category>
        
        <category>Data Plotting</category>
        
        <category>Statistics</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Setting up a CI for pclub.in</title>
        <description>&lt;p&gt;To begin with, I urge you to have a look at &lt;a href=&quot;https://github.com/pclubiitk/pclub.in&quot;&gt;our Github repo&lt;/a&gt; for this website.
Sure, Github serves the purpose of keeping our code public and accessible, and also lets users open issues and pull requests for the same.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://assets-cdn.github.com/images/modules/logos_page/Octocat.png&quot; style=&quot;width: 35%; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But more, we wanted to use Github as a medium to build the website automatically on commits to the master, and deploy the website as well.
This would mean, anyone can write a post, or fix a file using Github’s online interface, send a pull request; which can be merged online as well. At no point was there a need to download the repository, and yet, the website would build in less than 2 minutes, and be updated for public. Isn’t this cool? Hang on for how this was done.&lt;/p&gt;

&lt;h2 id=&quot;some-basic-information&quot;&gt;Some basic information&lt;/h2&gt;

&lt;p&gt;A lesser known fact is that Github also allows you to host webpages.
For instance, this website is also hosted on Github at &lt;a href=&quot;https://pclubiitk.github.io/pclub.in&quot;&gt;pclubiitk.github.io/pclub.in&lt;/a&gt;.
For this, you just need to keep your html files in a branch called &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; for a project repo, or in the master of a repo called &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;.
This is itself a big topic to cover here.&lt;/p&gt;

&lt;p&gt;An even lesser known fact is that you can use Github to build your static webpages for you automatically, using Continous Integration (CI).
This is only true for Jekyll though.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge&quot;&gt;The challenge&lt;/h2&gt;

&lt;p&gt;On deciding about setting up a CI for this website, I had several options in hand. But before that, we had several constraints as well. Some of them were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The website uses custom gems. Github’s automatic page building would not build it.&lt;/li&gt;
  &lt;li&gt;We host this website on a server inside IIT Kanpur. That server is not directly visible to the outside world, and only the HTTPS port is forwarded. So an external CI cannot send its built files to the server directly.&lt;/li&gt;
  &lt;li&gt;Deploying a local CI seemed like an overkill. Plus, IIT Kanpur’s internally deployed Gitlab wasn’t fully ready to be able to handle builds etc yet.&lt;/li&gt;
  &lt;li&gt;Even if one could somehow build the files, it would not be a direct task to get the files inside IIT Kanpur.&lt;/li&gt;
  &lt;li&gt;Providing permission to an external CI to push to the repository would require committing the private key, which is insecure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-resolution&quot;&gt;The resolution&lt;/h2&gt;

&lt;p&gt;We finally used &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; for this purpose. Travis is an online Continous Integration service, which offers to build your repositories for free, within some limits. You can customize how to build, and what else to do along with that much information. We set it up to build the code, and push it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch of the same repo.&lt;/p&gt;

&lt;h4 id=&quot;giving-travis-push-access-to-the-repository&quot;&gt;Giving travis push access to the repository&lt;/h4&gt;
&lt;p&gt;For travis to be able to push to the repo, it needed to be provided a ‘deploy-key’, a key which provides access to a repository to the person having the private counterpart of that deploy key. I generated a SSH-key pair, and added the public key to Github on this repository. As for the private, it had to be inside the repository. But then anyone could copy it and pretend to be our CI. The way out was &lt;a href=&quot;https://docs.travis-ci.com/user/encrypting-files/&quot;&gt;this&lt;/a&gt;. Turns out, Travis developers thought of this, and provided you ways to encrypt and decrypt files without storing the password anywhere. So finally, I ended up committing an encrypted version of the deploy-key, and then decrypting it inside the build machine during building. Have a look at that article to know how it can be done.&lt;/p&gt;

&lt;h4 id=&quot;deploying-to-the-branch&quot;&gt;Deploying to the branch&lt;/h4&gt;

&lt;p&gt;This was fairly easy. We make a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;, and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote ...&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; in that. We also checkout the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch. This is followed by the build. So basically, the required files get updated inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder. We add all files to git, and commit. This is then pushed to the origin, and we have the up to date build files in the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;

&lt;h4 id=&quot;getting-the-files-inside-the-server&quot;&gt;Getting the files inside the server&lt;/h4&gt;

&lt;p&gt;Since the pclub server is running blind to the world, there was no direct way for it to know that the repository has been updated. &lt;code class=&quot;highlighter-rouge&quot;&gt;webhooks&lt;/code&gt; came to the rescue here. So Github has another gem, which lets you execute arbitrary actions on events. So first, I enabled PHP on the server which is serving this website, followed by a randomly named PHP script, which checks for a valid request, and pulls the updated repository from Git.&lt;/p&gt;

&lt;p&gt;Think of it as a way to tell the machine that the code has been updated online, and it should pull in the new code. So currently, on every commit, the server will pull in the updated website. This is very convenient, as you can imagine, and simplifies the task of maintaining the website considerably.&lt;/p&gt;

&lt;p&gt;Of note, the original version of &lt;a href=&quot;https://gist.github.com/sakshamsharma/209054260cd5a55c5789e20597f8a423&quot;&gt;this Gist&lt;/a&gt; was a major help in all this.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 May 2016 23:00:20 +0000</pubDate>
        <link>http://pclub.in/pclub/2016/05/13/pclubci.html</link>
        <guid isPermaLink="true">http://pclub.in/pclub/2016/05/13/pclubci.html</guid>
        
        <category>meta</category>
        
        
        <category>pclub</category>
        
      </item>
    
      <item>
        <title>NERDCommenter</title>
        <description>&lt;h1 id=&quot;plugin-nerdcommenterhttpsgithubcomscrooloosenerdcommenter&quot;&gt;Plugin: &lt;a href=&quot;https://github.com/scrooloose/nerdcommenter&quot;&gt;NERDCommenter&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/scrooloose/nerdcommenter&quot;&gt;NERDCommenter&lt;/a&gt; is an awesome
plugin for commenting code. It works primarily
in the normal mode and is aimed at more efficient coding and debugging.&lt;/p&gt;

&lt;p&gt;What it does is allow you to comment out a line in any file using the
same keybindings. Let’s say you want to have the shortcut to comment
out a line as &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; because that is easy to type. Now for a block of
code, you go to a particular line and press &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;, the line gets commented.
You press &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; again, the line gets uncommented into the &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; state.
This adds a very powerful tool to your workflow allowing you comment
out as well as comment in lines very fast. You could also type something
like &lt;code class=&quot;highlighter-rouge&quot;&gt;5//&lt;/code&gt; to comment out 5 lines.&lt;/p&gt;

&lt;p&gt;This is what would happen:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Filetype&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Before&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;After&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int a = 5;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;//int a = 5;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Python&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a = 5;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#a = 5;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.vimrc&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set rnu&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;set rnu&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;For vim-plug, add the following line to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plug &lt;span class=&quot;s1&quot;&gt;&#39;scrooloose/nerdcommenter&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Read the &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;:help commenter&lt;/code&gt; for a complete description
of features. If you are wondering what is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;, it is a special &lt;code class=&quot;highlighter-rouge&quot;&gt;power-key&lt;/code&gt;
in vim with default value &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;. You can change it to whatever you like. Now to get
the setting we discussed before, i.e., fast commenting out and in using &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://github.com/scrooloose/nerdcommenter/blob/master/README.md&quot;&gt;README&lt;/a&gt;,
you will find that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;&lt;/code&gt; has the behaviour we want
of toggling comments. So in order to have that same command for &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;, you will
need to map &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; to it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;nmap &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;space&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
vmap &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; I map // to &amp;lt;leader&amp;gt;cs for sexy commenting instead of the normal&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; It is my own setting and you may wish to change it to &amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt; or &amp;lt;leader&amp;gt;ci&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now open up your favourite file and try this out. It is very efficient and something
very valuable to my current workflow. I have found myself pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; on someone else’s
machine to comment code ( which usually works in C :P ) many times.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;In order to understand, why we used &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt;
you might want to &lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/&quot;&gt;Learn Vimscript&lt;/a&gt;.
Its not compulsory, but it allows you to modify vim to your settings more easily.&lt;/p&gt;
</description>
        <pubDate>Mon, 09 May 2016 18:05:20 +0000</pubDate>
        <link>http://pclub.in/tutorial/vim/2016/05/09/nerdcommenter.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/vim/2016/05/09/nerdcommenter.html</guid>
        
        <category>vim</category>
        
        <category>tutorial</category>
        
        
        <category>tutorial</category>
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>Plugin Managers for Vim</title>
        <description>&lt;h1 id=&quot;plugins&quot;&gt;Plugins!!&lt;/h1&gt;

&lt;p&gt;Vim is a very simple text-based Text-Editor which can be transformed into a powerful IDE using plugins.
This is the first of many posts I’ll write about vim plugins one at a time and how to set them up fully for a truly satisfying
experience( custom tailored to &lt;em&gt;your&lt;/em&gt; requirements ).&lt;/p&gt;

&lt;p&gt;The first step to using vim plugins is finding them. You can find a list of trending vim plugins at &lt;a href=&quot;http://vimawesome.com&quot;&gt;vimawesome&lt;/a&gt;.
Once you find a plugin, you have to install it. Most plugins have a README.md which you should read carefully before deciding to use them.
  &amp;gt; Maybe it requires an external dependency&lt;br /&gt;
  &amp;gt; Maybe it needs a particular version of vim&lt;br /&gt;
  &amp;gt; Maybe it requires NeoVim&lt;/p&gt;

&lt;p&gt;After deciding upon that, installation needs to be done via a plugin manager like &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt; or
&lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vundle&lt;/a&gt; or &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;Neobundle&lt;/a&gt; or
&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;Vim-plug&lt;/a&gt; or &lt;a href=&quot;https://github.com/Shougo/dein.vim&quot;&gt;dein&lt;/a&gt; …&lt;/p&gt;

&lt;p&gt;So now starting upon my theme of taking one plugin at a time and setting it up, let’s start with plugin managers. I’ll highlight installation
of a single plugin in Vim-Plug, the one I use and just brush up on the other plugin managers. For an example, the plugin we
will be installing alongside the plugin manager is -&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/scrooloose/nerdcommenter&quot;&gt;NERDCommenter&lt;/a&gt; - It adds superb commenting powers in vim&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Vim-Plug&lt;/code&gt; is relatively newer so most plugins don’t refer to its installation instructions. The example I have taken
is generic enough to consider most cases. The steps remain the same for all plugins, only the link changes and some
of the options I specified change.
So now onto Vim-Plug&lt;/p&gt;

&lt;h2 id=&quot;vim-plughttpsgithubcomjunegunnvim-plug&quot;&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;Vim-Plug&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;A minimalist plugin manager and the one I use currently. Its features are highlighted at the top of
&lt;a href=&quot;https://github.com/junegunn/vim-plug/blob/master/README.md&quot;&gt;README.md&lt;/a&gt;.As per what I wrote previously, you really should check out the homepage, i.e, the README.md
and then decide whether this plugin is for you.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;This involves a single file, plug.vim, which needs to be loaded when Vim starts and hence
it is placed in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim/autoload&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The plugin is fetched using &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; which is a command line utility for downloading content from the web.
Now to install plugins, you need to add the relevant section in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;. For the example plugin:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; plug#begin&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;~/.vim/bundle&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Use single quotes&lt;/span&gt;

Plug &lt;span class=&quot;s1&quot;&gt;&#39;scrooloose/nerdcommenter&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; plug#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So let’s understand what I did here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;called &lt;code class=&quot;highlighter-rouge&quot;&gt;plug#begin()&lt;/code&gt; ( a function ) with an argument specifying where to install the plugins. Indicates that all lines
below this contain plugin options&lt;/li&gt;
  &lt;li&gt;Used &lt;code class=&quot;highlighter-rouge&quot;&gt;Plug &#39;scrooloose/nerdcommenter&#39;&lt;/code&gt; to specify the plugin. Most plugins are distributed via github repositories nowadays
so &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;scrooloose/nerdcommenter&#39;&lt;/code&gt; is a shorthand for &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/scrooloose/nerdcommenter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;called &lt;code class=&quot;highlighter-rouge&quot;&gt;plug#end()&lt;/code&gt; to specify that no more plugins beyond this point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim/bundle&lt;/code&gt; is where the plugins get installed. After adding this to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;, fire up vim and run
&lt;code class=&quot;highlighter-rouge&quot;&gt;:PlugInstall&lt;/code&gt;. This will start the installation in a side window with a nice progress bar while you can continue editing a file
due to the asynchronous install.&lt;/p&gt;

&lt;p&gt;To update plugins, run &lt;code class=&quot;highlighter-rouge&quot;&gt;:PlugUpdate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To uninstall a plugin, remove it from your vimrc and run &lt;code class=&quot;highlighter-rouge&quot;&gt;:PlugClean&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To update vim-plug itself, run &lt;code class=&quot;highlighter-rouge&quot;&gt;:PlugUpgrade&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Extensive options are available for customising the experience. Many examples of installing
are in the README.md with full documentation available by help.&lt;/p&gt;

&lt;p&gt;Also for learning how to use a plugin, once a plugin is fetched, you are encouraged to read its documentation using
&lt;code class=&quot;highlighter-rouge&quot;&gt;:help plugin_name&lt;/code&gt;, in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;:help commenter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minimal and easy to use&lt;/li&gt;
  &lt;li&gt;Highly customisable plugin loading&lt;/li&gt;
  &lt;li&gt;Asynchronous install&lt;/li&gt;
  &lt;li&gt;On demand plugin loading and hence faster startup time for vim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;None that bother me&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deinhttpsgithubcomshougodeinvim&quot;&gt;&lt;a href=&quot;https://github.com/Shougo/dein.vim&quot;&gt;Dein&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shougo/dein.vim&quot;&gt;Dein&lt;/a&gt; is the apparent successor of &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;Neobundle&lt;/a&gt; both by the same person - &lt;code class=&quot;highlighter-rouge&quot;&gt;Shougo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One of the main reasons why I liked &lt;code class=&quot;highlighter-rouge&quot;&gt;dein&lt;/code&gt; is because it supports asynchronous installation/updating of plugins, something which &lt;code class=&quot;highlighter-rouge&quot;&gt;Vundle&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;Pathogen&lt;/code&gt; do not support. &lt;code class=&quot;highlighter-rouge&quot;&gt;Neobundle&lt;/code&gt; provides this with the help of another plugin (&lt;code class=&quot;highlighter-rouge&quot;&gt;vimproc&lt;/code&gt;), but I believe inbuilt support is better.&lt;/p&gt;

&lt;p&gt;Advantages of using dein.vim:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Asynchronous Installs like vim-plug&lt;/li&gt;
  &lt;li&gt;Post installation hooks&lt;/li&gt;
  &lt;li&gt;Only Loads relevant plugins for a certain filetype and hence vim starts up faster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Relatively new and very little support&lt;/li&gt;
  &lt;li&gt;Help docs might be confusing sometimes due to too many features&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;neobundlehttpsgithubcomshougoneobundlevim&quot;&gt;&lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;Neobundle&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Since dein.vim is the newer version as mentioned &lt;a href=&quot;https://github.com/Shougo/neobundle.vim/blob/master/README.md&quot;&gt;here&lt;/a&gt;,
I’ll leave this out as deprecated&lt;/p&gt;

&lt;h2 id=&quot;pathogenhttpsgithubcomtpopevim-pathogen&quot;&gt;&lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;One of the oldest plugin managers for vim and hence it is slightly involved.
Pathogen works on the principle that most plugins are available from git repos,
so any git folder in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim/bundle&lt;/code&gt; is a plugin and hence it needs to be added
to the &lt;code class=&quot;highlighter-rouge&quot;&gt;runtimepath&lt;/code&gt; so that its data is loaded when vim fires up.&lt;/p&gt;

&lt;p&gt;So coming to the advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Old and ancient and hence extensive support&lt;/li&gt;
  &lt;li&gt;Very clean vimrc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Requires extensive effort from user side( some might consider this an advantage because you actually
learn whats happening inside instead of an abstraction hiding it )&lt;/li&gt;
  &lt;li&gt;Help tags not generated automatically, need to update manually, need to uninstall manually, etc.&lt;/li&gt;
  &lt;li&gt;All plugins are loaded irrespective of filetype&lt;/li&gt;
  &lt;li&gt;Asynchronous installs only if you can type asynchronously&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vundlehttpsgithubcomvundlevimvundlevim&quot;&gt;&lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vundle&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The last but not the least, Vundle. Neobundle was a fork of this
with more features and has now become dein. This is one of the first
plugin managers I used, thanks to &lt;a href=&quot;https://lakshayg.github.io&quot;&gt;Lakshay&lt;/a&gt; and kept for a long time till I decided to switch
to Vim-Plug. This is very nice and easy to use but just a little outdated as compared to Vim-plug.&lt;/p&gt;

&lt;p&gt;The reason why I shifted from &lt;strong&gt;Vundle&lt;/strong&gt; to &lt;strong&gt;VimPlug&lt;/strong&gt; was because of its synchronous(blocking)
install with no feedback on progress.&lt;/p&gt;

&lt;p&gt;Advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simple&lt;/li&gt;
  &lt;li&gt;Automated updation and helptags generation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Blocking install&lt;/li&gt;
  &lt;li&gt;No post installation hooks&lt;/li&gt;
  &lt;li&gt;Loads all plugins irrespective of filetype. Slower vim startup&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-more-custom-tailored-installation-using-vim-plug&quot;&gt;A more custom-tailored installation using Vim-Plug&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;This portion is only for those who have some experience in vim&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;If you are a vim learner, you may skip it right now&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ternjs/tern_for_vim&quot;&gt;tern-for-vim&lt;/a&gt; - It adds support for javascript in vim.&lt;br /&gt;
&lt;em&gt;tern_for_vim requires nodejs. (This is just an example, you don’t need to install this specifically)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I am choosing this Plugin because it has a build step alongside the usual installation and is valid for only some file types.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; plug#begin&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;~/.vim/bundle&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; Use single quotes&lt;/span&gt;

Plug &lt;span class=&quot;s1&quot;&gt;&#39;ternjs/tern_for_vim&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;do&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;npm install&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;for&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;javascript&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;foobarlang&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; plug#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What I did here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;called &lt;code class=&quot;highlighter-rouge&quot;&gt;plug#begin()&lt;/code&gt; ( a function ) with an argument specifying where to install the plugins. Indicates that all lines
below this contain plugin options&lt;/li&gt;
  &lt;li&gt;Used &lt;code class=&quot;highlighter-rouge&quot;&gt;Plug &#39;ternjs/tern_for_vim&#39;&lt;/code&gt; to specify the plugin. Most plugins are distributed via github repositories nowadays
so &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;ternjs/tern_for_vim&#39;&lt;/code&gt; is a shorthand for &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/ternjs/tern_for_vim&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now, if you read the README.md for &lt;code class=&quot;highlighter-rouge&quot;&gt;tern_for_vim&lt;/code&gt;, it requires an additional step after installation, i.e., you
need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; in its directory. Now, with other plugin managers, you will need to do this yourself but
&lt;code class=&quot;highlighter-rouge&quot;&gt;Vim-plug&lt;/code&gt; offers the option to specify a &lt;code class=&quot;highlighter-rouge&quot;&gt;post-install-hook&lt;/code&gt; i.e. the &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;do&#39;&lt;/code&gt; which specifies what needs to be done
after fetching the source.&lt;/li&gt;
  &lt;li&gt;I know that this plugin is useful only for javascript and foobarlang ( a super awesome language that can code the universe!! ).
So I denote that this plugin should only be loaded &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;for&#39;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;[&#39;javascript&#39;, &#39;foobarlang&#39;]&lt;/code&gt;. If I did not specify this, it would have
been loaded for all filetypes, slowing down startup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from the two non-default options above, there are many more. So how will you come to know about them???
Read the help docs like I did at the github repo.&lt;/p&gt;

&lt;h5 id=&quot;example-of-advanced-usage&quot;&gt;Example of advanced usage&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Vim-Plug&lt;/code&gt; takes the concept of loading plugins to another level by having an option to load plugins only when I call a certain function.
For example let there be a plugin X which has a function Y. Now this plugin won’t be loaded at vim startup. Instead it will be loaded
when I try to call the function Y. This plugin is valid for all filetypes but I only use it sometimes, so I set it up to only load
when the function is called.&lt;/p&gt;

&lt;h2 id=&quot;ending&quot;&gt;Ending&lt;/h2&gt;

&lt;p&gt;If you are a beginner in vim, I would suggest Vundle or Vim-Plug.
Pathogen is too ancient and dein.vim is too complex. On a personal note,
use vim plug as it has a simple interface for beginners and as and when you
grow more experienced, you can fine tune your plugins using it, as in the custom-tailored
example above. Even the pclub cordis use vim-plug. See &lt;a href=&quot;https://github.com/sakshamsharma/vivid-vim/blob/master/vimfiles/plugins.vim&quot;&gt;here&lt;/a&gt;
and &lt;a href=&quot;https://github.com/kunalapila/vimrc/blob/master/.vimrc&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ps&quot;&gt;PS&lt;/h2&gt;

&lt;p&gt;I consider myself a novice in vim with only 30-40% knowledge. So if my views seem
biased towards Vundle or Vim-plug its because I used them. If there are any errors here,
feel free to correct me in the comments.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 May 2016 07:32:20 +0000</pubDate>
        <link>http://pclub.in/tutorial/vim/2016/05/08/plugins.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/vim/2016/05/08/plugins.html</guid>
        
        <category>vim</category>
        
        <category>tutorial</category>
        
        
        <category>tutorial</category>
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>Contributing to pclub.in</title>
        <description>&lt;p&gt;We’ll be describing the procedure of contibuting posts to the Programming Club website here.&lt;/p&gt;

&lt;p&gt;The website is based on &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, and we use Markdown format for writing posts.
Here are some steps you should go through to contribute a post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Have a look at previous posts here at &lt;a href=&quot;https://github.com/pclubiitk/pclub.in/tree/master/_posts&quot;&gt;our Github repository&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Have a look at the following template for each post:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;some&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;title&amp;gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2016-05-05 17:23:20 +200&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;your-name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;website&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;website-if-any&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;some tag&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;another tag&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;a category&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;link to a title image&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

Your article&#39;s content goes here in markdown syntax&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Follow this template to the bit.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Ensure that you are familiar with basic markdown syntax. It’s really easy!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check that you have included credits, if any part belongs to someone else.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Done already? Mail or message the markdown file to any of the coordinators, or at pclubiitk@gmail.com. If you’re familiar with Git, you can also send us a Pull Request on our Github repository listed in the below point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/contact.html&quot;&gt;Contact Us&lt;/a&gt; if there are any issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And of course, we’re open source. Find the source code at &lt;a href=&quot;https://github.com/pclubiitk/pclub.in&quot;&gt;Github here&lt;/a&gt;, and feel free to open new issues, pull requests etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 05 May 2016 15:23:20 +0000</pubDate>
        <link>http://pclub.in/tutorial/2016/05/05/posttemplate.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/2016/05/05/posttemplate.html</guid>
        
        <category>meta</category>
        
        <category>tutorial</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Kickstart to Vim</title>
        <description>&lt;h1 id=&quot;vim&quot;&gt;Vim!&lt;/h1&gt;

&lt;p&gt;Vim is one of the two widely known text-based Text Editor cum IDEs, the other one being, ahem, Emacs.
For people new to Vim, it might have be a big leap, it is markedely different from the usual text editors, it being modal (implying that the same keys do differnt things in different modes. Don’t worry, modes are awesome.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://realpython.com/images/blog_images/vim/vim-ide.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This article has been taken from the blog at &lt;a href=&quot;http://www.acehack.org/posts/2015-06-15-vim.html&quot;&gt;acehack.org&lt;/a&gt;. Please note that it assumes a bit of familiarity with Vim, and thus, you should first start off by reading about it, getting an installation of it, and learning how to type things in it (yes, you need to learn that too). It’s fun, I promise :smile:&lt;/p&gt;

&lt;p&gt;So, first, some cool things about Vim:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Firstly, you don’t have to press any keys beyond the Return key. No need to stretch/move your hands to press the home/end/page up/page down/left/right keys. There are much better ways to do that.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, Vim would work even on the most old computer you will ever encounter in your lifetime, and also on computers older than that. As a big boon, it works in an SSH session, and you are likely to find it (or Vi) on every PC you will ever need to SSH to.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, Vim is yours to make. Everyone’s Vim is personalized, and is taken as a sign of identity. You make it whatever you want to; and yes, it can do whatever you want it to do (within sane limits).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basics&quot;&gt;Basics&lt;/h3&gt;
&lt;p&gt;Open Vim by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; in your terminal, or else &lt;code class=&quot;highlighter-rouge&quot;&gt;vim &amp;lt;file&amp;gt;&lt;/code&gt; to open a particular file. I also first recommend you to open &lt;code class=&quot;highlighter-rouge&quot;&gt;vimtutor&lt;/code&gt;, Vim’s own tutor. I would be covering the basics pretty fast, as vimtutor explains them really well.&lt;/p&gt;

&lt;p&gt;So, Vim by default opens in the ‘normal’ mode. This mode doesn’t let you type text (so don’t freak out when you try to type something). In this mode, most of the alphabet keys are binded to regular text-editing functions. For starters, pressing ‘x’ deletes the character below the cursor.&lt;/p&gt;

&lt;p&gt;You press ‘i’ for Insert, this takes you to insert mode, where your alphabet keys work normally. Try typing something in Insert mode, then press the Escape key to exit to the Normal mode. Then move your cursor with the arrow keys (BAD practice, I’ll come to this) over some character, and press ‘x’ to see it get deleted.&lt;/p&gt;

&lt;p&gt;Now to embed the biggest change you should embrace, in Vim we use the keys ‘hjkl’ for moving. The arrow keys are NOT to be used. Here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;h: Left&lt;/li&gt;
  &lt;li&gt;j: Down&lt;/li&gt;
  &lt;li&gt;k: Up&lt;/li&gt;
  &lt;li&gt;l: Right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get used to these, and stop using arrow keys pronto. This is because, to be able to use Vim at the speed it is meant for, you ought not to move your hands away from the alphabet region of the keyboard. I’ll come to ‘banning’ the use of the arrow keys in a short while. Also, these 4 keys represent the 4 different motions in Vim (see section on Motions)&lt;/p&gt;

&lt;p&gt;So, learn the basic moves, you type in the Insert mode, you exit the insert mode for any editing. This is where you use the Vim specific commands. I’ll list the main ones here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;i: Insert mode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;x: Delete character&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;yy: Yank a line (Yank implies keeping a line for pasting, like the concept of ‘Copy’ in modern text editors)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dd: Kill a line (Kill implies delete it, but keep it for pasting, like the concept of ‘Cut’ in modern text editors)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;dw: Delete a word (from current position to the end of the current word)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;p: Paste some previously killed text (y stands for Yanking)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gg: Go to the start of the document&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;G: Go to the end of the document&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;o: Insert a new line below the current line, move the cursor there, and then enter insert mode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;O: Insert a new line above the current line, move the cursor there, and then enter insert mode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A: Enter insert mode at the end of the current line&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;0: Move to the start of the current line&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$: Move to the end of the current line&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;%: Move to a matching brace (when your cursor is one brace, this moves you to the matching one, useful in languages like C where blocks of code are bounded by curly braces)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“+yy: Copy line which can be pasted anywhere other than Vim too (like Browser)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“+p: Paste text copied from outside Vim (Their meaning will be explained in a later section)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now to saving files, you can save any text you write with &lt;code class=&quot;highlighter-rouge&quot;&gt;:w&lt;/code&gt;. Note that pressing ‘:’ takes you to a special mode where you can type out commands. More on this later. ‘w’ stands for write. You can save a file you opened with &lt;code class=&quot;highlighter-rouge&quot;&gt;:w&lt;/code&gt;, but if it was a new file, you would have to write something like &lt;code class=&quot;highlighter-rouge&quot;&gt;:w filename&lt;/code&gt; to save it by that name in the current directory where Vim was opened.&lt;/p&gt;

&lt;p&gt;You can quit Vim with &lt;code class=&quot;highlighter-rouge&quot;&gt;:q&lt;/code&gt;. Also, you can quit without saving changes by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;:q!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure that you check out &lt;code class=&quot;highlighter-rouge&quot;&gt;vimtutor&lt;/code&gt; at this stage. Try practicing basic vim using that now.&lt;/p&gt;

&lt;h3 id=&quot;repeating-commands&quot;&gt;Repeating commands&lt;/h3&gt;

&lt;p&gt;If you have to delete 10 consecutive lines, in a normal editor you can select them with your mouse and then delete it. Or maybe press Ctrl+Shift+Down and select them, then delete. All this is too slow.&lt;/p&gt;

&lt;p&gt;Here’s something better: &lt;code class=&quot;highlighter-rouge&quot;&gt;10dd&lt;/code&gt;. A simple and standard pattern for all commands in Vim. You can prefix them with a number to repeat them that number of times. So 10yy would copy/yank the next 10 lines.&lt;/p&gt;

&lt;p&gt;This is a very important thing in Vim. Similarly, you can copy 10 lines with 10yy. You can delete 10 characters with 10x. You can go 10 lines downward with 10j, or 10 lines up with 10k. You can copy 10 lines (such that they can be pasted elsewhere too) with 10”+yy. Try things out!&lt;/p&gt;

&lt;h3 id=&quot;motions&quot;&gt;Motions&lt;/h3&gt;

&lt;p&gt;I’ll explain this with an example. Type some C code in Vim, and don’t try to align it. Let it remain unindented. Now to indent code, in Vim you use the character ‘=’. Now, to inform Vim of the block of code you want to indent, say you have 10 lines to indent, you go to the 1st line you want to indent, then type &lt;code class=&quot;highlighter-rouge&quot;&gt;10=j&lt;/code&gt;. What does this mean?
It defines a motion for Vim. It reads as ‘Indent the 10 lines below me.’ (remember j stands for going down). This might be intimidating at first, but happens to be really versatile with practice.
What if you want to indent the whole code? Try this &lt;code class=&quot;highlighter-rouge&quot;&gt;gg=G&lt;/code&gt;. This stands for ‘Go to the start, and indent all lines from the current position to the last line of the file’.&lt;/p&gt;

&lt;h3 id=&quot;visual-mode&quot;&gt;Visual Mode&lt;/h3&gt;

&lt;p&gt;Another way to do stuff like this, which might be more familiar to new users, is the Visual Mode. You wish you could just drag and select a block of lines to copy? Here’s a way.&lt;/p&gt;

&lt;p&gt;Press &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+V&lt;/code&gt; (this does not stand for paste in Vim, remember). This activates Visual Mode. Now you can move around with hjkl and see text getting selected. Leave this mode with Escape key.&lt;/p&gt;

&lt;p&gt;Now, say you want to copy 10 lines, go to the first line in normal mode. Press ‘0’ to get to the beginning of the current line. Enter Visual Mode. Press ‘$’ to select to the end of this line. Press j 10 times to go 10 lines down. See? You have 10 lines selected now (you can also use your mouse to do this, I’ll tell you how to enable mouse in a later section). Copy them with ‘y’, or if you want to paste them elsewhere, copy them with “+y.&lt;/p&gt;

&lt;h3 id=&quot;the-colon-commands&quot;&gt;The colon commands&lt;/h3&gt;

&lt;p&gt;Vim can do various other non-editing stuff with the colon-commands. You want to change your colour-scheme? Type &lt;code class=&quot;highlighter-rouge&quot;&gt;:colorscheme &amp;lt;name&amp;gt;&lt;/code&gt; and you’re done (remember, Tab completion works here. Try experimenting with different schemes right now and choose one you like).&lt;/p&gt;

&lt;p&gt;Try typing &lt;code class=&quot;highlighter-rouge&quot;&gt;:set &lt;/code&gt; and then try Tab completion, you’ll see the various settings you can play with.\n
Of note, these commands stay active only till Vim is open. If you close it and re-open, these settings are gone. To keep them permanent, look at the section about the vimrc.
Here is a simple setting: &lt;code class=&quot;highlighter-rouge&quot;&gt;:set nu&lt;/code&gt;, this shows the line numbers on the left. Another thing (though not really recommended), you can enable mouse with &lt;code class=&quot;highlighter-rouge&quot;&gt;:set mouse=a&lt;/code&gt;, where a stands for all. You can enable it for specific modes too, with n/i in place of a.&lt;/p&gt;

&lt;h3 id=&quot;the-vimrc&quot;&gt;The .vimrc&lt;/h3&gt;

&lt;p&gt;So, I claimed Vim is yours to build. Here is the way you do that. You use the configuration file called vimrc. This is a file located in your home folder by the name &lt;em&gt;.vimrc&lt;/em&gt;. If not there, create a new one and open it.&lt;/p&gt;

&lt;p&gt;Here, you can set commands to be executed whenever your Vim starts (mind it, it can slow it down a very little bit sometimes, still faster than everything out there though). So say for example you want to display line numbers all the time. You can simply write &lt;code class=&quot;highlighter-rouge&quot;&gt;set nu&lt;/code&gt; in your vimrc and save it. Next time you open Vim, it will have line numbers from the start.&lt;/p&gt;

&lt;p&gt;You can save Keymappings here, enable Plugins here, and do almost anything with your Vim here.&lt;/p&gt;

&lt;h3 id=&quot;plugins&quot;&gt;Plugins&lt;/h3&gt;

&lt;p&gt;The best thing about Vim is, even though it doesn’t do everything itself, it can do almost anything with plugins written by the vast Vim community.
Want Git support in Vim? git-gutter. Want auto-completion? AutoComplPop. Want to code in Scala? You have vim-scala.&lt;/p&gt;

&lt;p&gt;Here is how to set up your Vim to handle plugins fast and easy. You need a plugin for that too! :p Don’t get scared already. So, its called Vundle (vim-bundle I fancy). You can clone it with:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This clones the files required for Vundle to your .vim folder where your Vim files are stored (other than your vimrc of course).&lt;/p&gt;

&lt;p&gt;Now add this to the start of your .vimrc:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; nocompatible
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; off
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; rtp&lt;span class=&quot;p&quot;&gt;+=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.vim/&lt;/span&gt;bundle/Vundle&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
Plugin &lt;span class=&quot;s1&quot;&gt;&#39;gmarik/vundle&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; plugin indent &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now look up the plugin on GitHub (or other sources, I’ll update this thing). Say the homepage of that plugin is this: https://github.com/tpope/vim-fugitive (a very useful Git plugin).&lt;/p&gt;

&lt;p&gt;You can install it by adding this to your .vimrc: &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugin &#39;tpope/vim-fugitive&#39;&lt;/code&gt; after the gmarik line in the text I told you to paste above. Restart vim (close and open it). Now type in &lt;code class=&quot;highlighter-rouge&quot;&gt;:PluginInstall&lt;/code&gt; (tab-completion works). There you go, Vundle will now download and install any new plugins you wanted to install.&lt;/p&gt;

&lt;h3 id=&quot;keymappings&quot;&gt;Keymappings&lt;/h3&gt;

&lt;p&gt;This is one of the great features of Vim, you can map almost any activity you repeat to a key binding.
So here’s a scenario, I use a plugin called NERDcommenter (I cannot live without this). This plugin by default comments the current line when you press &lt;em&gt;leader ci&lt;/em&gt; . What I want instead is, to comment the line when I press ‘//’.
So here is what I key-in: &lt;code class=&quot;highlighter-rouge&quot;&gt;:map // &amp;lt;leader&amp;gt;ci&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;the--stuff&quot;&gt;The :! stuff&lt;/h3&gt;

&lt;p&gt;One of the coolest things about Vim which modern editors cannot do, it to be able to run terminal commands right inside the editor. So say, you want to compile and run your C++ code from within Vim, and don’t want to exit, I’ll show you how to do that. Well modern editors can do this, but the fact that you can integrate these commands and actions into your keybindings, and plugins, and scripts etc etc, that makes this functionality a lot of fun.
Try typing this: &lt;code class=&quot;highlighter-rouge&quot;&gt;:!echo &quot;Yo hey! Vim is cool!&quot;&lt;/code&gt;. See? Now try &lt;code class=&quot;highlighter-rouge&quot;&gt;:!date&lt;/code&gt;.
I use this to compile my LaTeX documents on the fly: &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap &amp;lt;F5&amp;gt; :w !pdflatex %&amp;lt;return&amp;gt;&lt;/code&gt;. A simple tap on F5, and the editor on the right refreshes the document preview. Neat, ain’t it?
The possibilities with this are endless. You can write complete functions and scripts using this, to accomplish common tasks.&lt;/p&gt;

&lt;p&gt;I’ll add more info here as and when I get time.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Apr 2016 18:29:21 +0000</pubDate>
        <link>http://pclub.in/tutorial/vim/2016/04/29/kickstarttovim.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/vim/2016/04/29/kickstarttovim.html</guid>
        
        <category>summer16</category>
        
        <category>tutorial</category>
        
        <category>vim</category>
        
        
        <category>tutorial</category>
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>A Coding Primer</title>
        <description>&lt;h1 id=&quot;welcome-to-the-programming-club-summer-camp&quot;&gt;Welcome to the Programming Club Summer Camp!&lt;/h1&gt;

&lt;p&gt;This post will serve as a list of things you should and should not do while you get into coding.
First off, coding is not this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.ytimg.com/vi/aGujPFCKgdU/hqdefault.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, not to begin with, atleast. It’ll be plain, but we’ll get there in a while :smile:&lt;/p&gt;

&lt;h3 id=&quot;so-youve-done-esc101&quot;&gt;So you’ve done ESC101?&lt;/h3&gt;
&lt;p&gt;Well, that’s a start. But ESC has focussed on the algorithmic, and syntax part of programming. Most
of the programs you’d have written would have been less than 200 lines of code (LOC). We’ll write thousands of lines together during the summers!&lt;/p&gt;

&lt;p&gt;It’s not as tough as you may think. Here we’ll focus mostly on design of applications. The code is not going to be as challenging as in ESC, but the design phase is going to be new. Structuring large applications is a very important thing to be comfortable with.&lt;/p&gt;

&lt;p&gt;Another requirement for most projects would be to use Linux and the Linux terminal. While the Game development ones, and the app development projects would be probably on Windows in all likeliness, we’d advise that you use Linux for all other projects.&lt;/p&gt;

&lt;p&gt;In addition, you’d also need to learn a very important tool called &lt;em&gt;Git&lt;/em&gt;. Often people do not realize it’s importance till very late, and so, starting this year, all projects will be reviewed and hosted on a local Git.&lt;/p&gt;

&lt;p&gt;There’s another point which I would stress upon: The art of googling. Coming up on this soon.&lt;/p&gt;

&lt;p&gt;Now enough with the chit chat, we get to the real stuff now.&lt;/p&gt;

&lt;h3 id=&quot;were-the-google-generation&quot;&gt;We’re the Google generation!&lt;/h3&gt;
&lt;p&gt;Quite literally; a programmer’s significant amount of time goes into googling away his/her troubles. This seems like a very abstract thing to say.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I know how to Google! I’ve been using it for ages!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, here’s the deal. By Googling, I mean knowing the right keywords to search for, and knowing what all information is superflous in an article, which links are useless, which paras will not help me find the solution faster; these things.&lt;/p&gt;

&lt;p&gt;This comes by practice. If you cannot find a solution, Google more. You’ll be inproving this skill. Getting everything on a platter is not what coding is about, and you will need to dig deep to find ways to accomplish tasks.&lt;/p&gt;

&lt;h3 id=&quot;the-art-of-gisting&quot;&gt;The art of gisting!&lt;/h3&gt;
&lt;p&gt;Yes I coined a new word up there. The skill of absorbing information without having to spend 3 days trying to learn every single new thing; well I cannot stress enough on this skill’s importance.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You should have a clear aim in mind as to what you want to accomplish.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow it up with a basic reading of what all possible packages/technologies/softwares you can use for that.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get hold of the basics of that technology. So if it is a web development framework, read the first 2 chapters of it’s documentation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set a small goal. For instance: I want a cool-looking top-bar for my website. Then read about how to do that (Google!). Do it, and keep seeing things which you do not know.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep setting newer targets, and the moment you come across something new, read a little on it; only as much as is needed for your target. And implement it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way, you would be churning out code after code, and it’ll be cool! You’ll not be mugging things, or reading long long articles. The majority of your time would be spent actually implementing things.&lt;/p&gt;

&lt;p&gt;So when people ask me how long it’ll take to learn Python, I say half an hour. Because that is the amount of time you would need to learn enough to start on a goal. Once you’re on a goal, you’ll be learning along the way. There’s no point spending days together on a thing for which you only need to know a little to implement.&lt;/p&gt;

&lt;h3 id=&quot;linux&quot;&gt;Linux&lt;/h3&gt;
&lt;p&gt;Well, Ubuntu would be great for 99% of Linux beginners out there, so go ahead and install it. Ask the coordinators for any help if needed. Go here -&amp;gt; &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;
You’d need to have an empty partition (disk drive) ready to be emptied completely, for this. If for some exceptional reasons, that is not manageable, try using VirtualBox.&lt;/p&gt;

&lt;p&gt;What is going to be the useful part is to learn how to use the Linux terminal. Once you have Ubuntu installed, try pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Alt+T&lt;/code&gt;. You’d see a &lt;em&gt;hacking-waala-box&lt;/em&gt;. That’s the terminal (Windows people know it as &lt;em&gt;Command Line&lt;/em&gt;). The computer systems running today all run over such a thing. The graphics are mostly a farce, and a terminal is the one running things (Yes, really), and running the graphics as well. You can do everything you can do on a graphical system using this terminal (except of course the things requiring visual manipulation).&lt;/p&gt;

&lt;p&gt;So coming to the point, terminal is a really useful thing to know. Here’s an article you can follow up for this -&amp;gt; &lt;a href=&quot;https://help.ubuntu.com/community/UsingTheTerminal&quot;&gt;UsingTheTerminal&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;
&lt;p&gt;As mentioned before, Git is going to be invaluable. Git is a version control system, implying that it will manage your program’s versions; keep it organized, clean and presentable; let you go back to older versions; visualize your progress on the project; and many more things.&lt;/p&gt;

&lt;p&gt;To begin with, read some about Git and GitHub/Bitbucket/GitLab (&lt;em&gt;PLEASE&lt;/em&gt; note that Git and GitHub are very different). Start here -&amp;gt; &lt;a href=&quot;https://www.atlassian.com/git/tutorials/&quot;&gt;Git Tutorial Atlassian&lt;/a&gt;. Go with the first few chapters.&lt;/p&gt;

&lt;p&gt;Git is an offline thing. It manages local versions of your code, so you do not have to keep folders like &lt;code class=&quot;highlighter-rouge&quot;&gt;code-5-may&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;code-10-may&lt;/code&gt; and the likes. GitHub etc are online hosts for this. So if you want to work in a team on the same code, these websites will manage a centralized version of the code, and everyone can get copies of it and work together, and merge their work. Here’s something to help you understand the part GitHub does -&amp;gt; &lt;a href=&quot;https://guides.github.com/activities/hello-world/&quot;&gt;GitHub tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, and do go here for some hands on -&amp;gt; &lt;a href=&quot;https://try.github.io/&quot;&gt;Git Tutorial&lt;/a&gt;. This is a pretty cool tutorial.&lt;/p&gt;

&lt;h3 id=&quot;a-good-coding-style&quot;&gt;A Good coding style&lt;/h3&gt;
&lt;p&gt;A seasoned programmer can judge a coder by his code style. Some things off the top of my head:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Do NOT write badly indented code. Most editors have an auto-indent feature. Make sure you indent your code all the time. Indent involves giving similar spaces to distinguish code blocks etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fix an indent width. Most commonly used is 4 spaces. Set your tabstop to 4 spaces.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fix whether to use tabs or spaces. Most editors will also have an option to convert all indent tabs to spaces. Do that to ensure uniformity.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do not leave useless lines in between.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a fixed style of function definitions and curly braces. For instance, I prefer this one:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Code here
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Write ample comments. This is extremely important. But make sure you comment only at the useful places. Adding 2 numbers does not need a comment. Why you did that may need one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that a clean code is more likely to be finally deployed. Mentors will not want to look at bad codes and fix them if need be. So it is up to you to ensure that your code is good to look at.&lt;/p&gt;

&lt;h3 id=&quot;text-editors&quot;&gt;Text Editors!&lt;/h3&gt;
&lt;p&gt;This may seem out of place here, but text editors are among the most important things on a programmer’s machine. Be sure to configure one properly. I’ll recommend &lt;code class=&quot;highlighter-rouge&quot;&gt;atom&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sublime&lt;/code&gt; for beginners. But if you want to reach the pinnacle of nerd-dom (No its not a bad thing, No it won’t stop you from having fun), I cannot recommend Vim/Emacs enough. Go and google Vim, please do. It’ll take weeks to configure properly, but it’s worth it.&lt;/p&gt;

&lt;p&gt;P.S. If you have some free time, also google for &lt;a href=&quot;https://en.wikipedia.org/wiki/Editor_war&quot;&gt;Editor Holy Wars&lt;/a&gt; and look at the Humor section there.&lt;/p&gt;

&lt;h3 id=&quot;hacks-in-the-code&quot;&gt;Hacks in the code&lt;/h3&gt;
&lt;p&gt;By hacks I mean tricks which are out-of-place, but work. These are temporary solutions, and are likely to break when you least expect them to. Try to stay away from them as much as possible. If not possible, put a comment starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO&lt;/code&gt; mentioning you have to fix it.&lt;/p&gt;

&lt;p&gt;Also, placing code in random files is a hack too. For instance, for web development projects, you must not mix HTML/CSS/JS/PHP etc in the same file. Keep things logically separated. I made a sample website which demonstrates a good way of organizing your web code. Have a look at it once you’re done with learning the basics of web development. Here -&amp;gt; &lt;a href=&quot;https://github.com/sakshamsharma/webdev-basic&quot;&gt;Webdev-basics&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;done&quot;&gt;Done?&lt;/h3&gt;
&lt;p&gt;We’re just scratching the surface yet! Get ready to code! Feel free to contact the coordinators for any help regarding these. You’ve got the spark, let’s get coding!&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Apr 2016 18:20:21 +0000</pubDate>
        <link>http://pclub.in/tutorial/2016/04/29/codingprimer.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/2016/04/29/codingprimer.html</guid>
        
        <category>meta</category>
        
        <category>summer16</category>
        
        <category>tutorial</category>
        
        <category>git</category>
        
        
        <category>tutorial</category>
        
      </item>
    
  </channel>
</rss>
