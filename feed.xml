<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Club IIT Kanpur</title>
    <description>The Programming Club, IIT Kanpur
</description>
    <link>http://pclub.in/</link>
    <atom:link href="http://pclub.in/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 16 Aug 2016 10:44:21 +0000</pubDate>
    <lastBuildDate>Tue, 16 Aug 2016 10:44:21 +0000</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>Practice Programming Contest, Summer 2016</title>
        <description>&lt;h1 id=&quot;contest-summary-summer-2016&quot;&gt;Contest Summary: Summer 2016&lt;/h1&gt;

&lt;p&gt;This summer, Programming Club IIT Kanpur kicked off the 2016-17 season, with a Summer WPC
held on the Hackerearth platform. The primary problem setter and tester was
&lt;a href=&quot;http://codeforces.com/profile/ajs97&quot;&gt;Arjun Sinha&lt;/a&gt;, a student of the Y15 batch.
There was an amazing amount of participation, both from within and outside the IITK campus.
The contest was very well received by all those who participatd. Here are some of the contest statistics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Duration: 6:00 pm 28&lt;sup&gt;th&lt;/sup&gt; June, 2016 IST - 7:00pm 29&lt;sup&gt;th&lt;/sup&gt; June, 2016 IST&lt;/li&gt;
  &lt;li&gt;Number of registered participants: 1301&lt;/li&gt;
  &lt;li&gt;Number of participants with atleast one submission:507&lt;/li&gt;
  &lt;li&gt;Problem with most number of submissions: &lt;strong&gt;Weird Chemists&lt;/strong&gt; :&lt;em&gt;464 correct submissions&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Problem with the least number of submissions: &lt;strong&gt;Tree Tank&lt;/strong&gt; :&lt;em&gt;10 correct submissions&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now for the contest ranks-&lt;br /&gt;
1. &lt;strong&gt;Mohib Manva&lt;/strong&gt;, of DAIICT Gandhinagar&lt;br /&gt;
2. &lt;strong&gt;Satyaki Upadhyay&lt;/strong&gt;, of BITS Pilani, Pilani Campus&lt;br /&gt;
3. &lt;strong&gt;Swastik Sharma&lt;/strong&gt;, of IIT Kanpur&lt;/p&gt;

&lt;p&gt;The three winners solved all the 12 problems in the contest. Congratulations to winners!&lt;/p&gt;

&lt;p&gt;In conclusion, we at PClub were more than happy with the participation and peformance of the contestants.
The problem gradient was good, with the easy problems being solved by a large fraction of contestants,
along with submissions decreasing gradually on the medium and hard problems.&lt;/p&gt;

&lt;p&gt;Here are the problems links for you to read:&lt;br /&gt;
(Note: You must be logged into HackerEarth to be able to view these links)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/weird-chemists-3/&quot;&gt;&lt;strong&gt;Weird Chemists&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/alternating-sequences-3/&quot;&gt;&lt;strong&gt;Alternating Sequences&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/om-nom-and-candies/&quot;&gt;&lt;strong&gt;Om Nom and Candies&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/andrew-and-his-bike-3/&quot;&gt;&lt;strong&gt;Andrew and His Bike&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/horn-ok-please/&quot;&gt;&lt;strong&gt;Horn Ok Please&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/inverted-gcd/&quot;&gt;&lt;strong&gt;Inverted GCD&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/lizzys-queries/&quot;&gt;&lt;strong&gt;Lizzy’s Queries&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/monochrome-tree/&quot;&gt;&lt;strong&gt;Monochrome Tree&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/rendezvous-3/&quot;&gt;&lt;strong&gt;Rendezvous&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/tree-tank/&quot;&gt;&lt;strong&gt;Tree Tank&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/miranda-writes/&quot;&gt;&lt;strong&gt;Miranda Writes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/algorithm/find-the-triangle-3/&quot;&gt;&lt;strong&gt;Find The Triangle&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to submit solutions to the problems, you can submit them in the links given above.
Here is the &lt;a href=&quot;https://www.hackerearth.com/IITK-WPC-Summer16/&quot;&gt;link&lt;/a&gt; of the contest for your reference.
We look forward further WPCs being held this year.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Aug 2016 18:55:00 +0000</pubDate>
        <link>http://pclub.in/competitive/2016/08/13/SummerContestReport.html</link>
        <guid isPermaLink="true">http://pclub.in/competitive/2016/08/13/SummerContestReport.html</guid>
        
        <category>competitive</category>
        
        <category>WPC</category>
        
        
        <category>competitive</category>
        
      </item>
    
      <item>
        <title>Introductory Workshop 2016</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Hi all, welcome to the Programming Club Introductory Workshop 2016!&lt;/p&gt;

&lt;h2 id=&quot;terminal&quot;&gt;Terminal&lt;/h2&gt;
&lt;p&gt;Try opening Terminal (sometimes known as Command Line) from the top-left menus. You should find it in the ‘System’ applications.&lt;/p&gt;

&lt;p&gt;Mind it, some operating systems like Ubuntu might have a shortcut for this, you can open it using &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Alt+T&lt;/code&gt;, but &lt;em&gt;not&lt;/em&gt; in the CC machines.&lt;/p&gt;

&lt;p&gt;This is where you should learn to do all stuff related to programming, since this gives you &lt;em&gt;unfathomable&lt;/em&gt; power.&lt;/p&gt;

&lt;h2 id=&quot;directory-structure&quot;&gt;Directory structure&lt;/h2&gt;
&lt;p&gt;Linux organizes files and folders in the following way:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Files are kept inside folders&lt;/li&gt;
  &lt;li&gt;You can enter and exit folders just like in Windows&lt;/li&gt;
  &lt;li&gt;Folders are named in the following way: &lt;code class=&quot;highlighter-rouge&quot;&gt;/path-to-folder/folder-name&lt;/code&gt;. This is what completely describes a folder (or a file).&lt;/li&gt;
  &lt;li&gt;We will be using the word &lt;code class=&quot;highlighter-rouge&quot;&gt;directory&lt;/code&gt; for folders. Please note this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To play around with this, try to use the following commands:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Command&lt;/td&gt;
      &lt;td&gt;Full form&lt;/td&gt;
      &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ls&lt;/td&gt;
      &lt;td&gt;list screen&lt;/td&gt;
      &lt;td&gt;List all the files and folders in current directory&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cd&lt;/td&gt;
      &lt;td&gt;change directory&lt;/td&gt;
      &lt;td&gt;Enter a folder whose path is known&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pwd&lt;/td&gt;
      &lt;td&gt;present working directory&lt;/td&gt;
      &lt;td&gt;Full name of the current folder you are in&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;~&lt;/td&gt;
      &lt;td&gt;tilde&lt;/td&gt;
      &lt;td&gt;Short form for your home folder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+c&lt;/code&gt;(keyboard)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Exit/Cancel the current command&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;exit&lt;/td&gt;
      &lt;td&gt;Exit&lt;/td&gt;
      &lt;td&gt;Exit the terminal&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;gedit&quot;&gt;Gedit&lt;/h2&gt;
&lt;p&gt;We will be using &lt;code class=&quot;highlighter-rouge&quot;&gt;gedit&lt;/code&gt; to write your programs. Find it from the applications menu and open it. Don’t be scared, it’s very much like &lt;code class=&quot;highlighter-rouge&quot;&gt;notepad&lt;/code&gt; from Windows.&lt;/p&gt;

&lt;h1 id=&quot;python&quot;&gt;Python&lt;/h1&gt;

&lt;p&gt;Try running &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; command in the terminal. You should see something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Python 2.7.10 (default, Jul  6 2016, 22:05:31) 
[GCC 4.9.3] on linux2
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; is the place where you type. Try typing the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2+2&lt;/li&gt;
  &lt;li&gt;print “hello world!”&lt;/li&gt;
  &lt;li&gt;print a (you should get an error)&lt;/li&gt;
  &lt;li&gt;a = 4&lt;/li&gt;
  &lt;li&gt;print a*2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You used an &lt;em&gt;operator&lt;/em&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;a*2&lt;/code&gt; - the multiplication operator. Other operators you need to try out are:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;Addition&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Subtraction&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;*&lt;/td&gt;
      &lt;td&gt;Multiplication&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/&lt;/td&gt;
      &lt;td&gt;Division&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;**&lt;/td&gt;
      &lt;td&gt;To the power of&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;ifelse&quot;&gt;If/Else&lt;/h2&gt;

&lt;p&gt;Now that you know how to write simple things, let’s proceed to something interesting.&lt;/p&gt;

&lt;p&gt;Python reads spaces and tabs in your program as well. So for writing a complicated instruction for the computer, we will need to use multiple lines. We will &lt;code class=&quot;highlighter-rouge&quot;&gt;indent&lt;/code&gt; the lines in such a way that the computer can understand that they are meant to be read together.&lt;/p&gt;

&lt;p&gt;Try the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a is not zero&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a is zero&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it! See?&lt;/p&gt;

&lt;p&gt;Sometimes one condition isn’t enough though. In that case, you are allowed to chain up multiple conditions using &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Condition successful&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;condition failed&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s all good, but what if you want multiple checks on a variable? For example, let’s say you want to do Action 1 if &lt;code class=&quot;highlighter-rouge&quot;&gt;a&amp;lt;10&lt;/code&gt; and Action 2 if &lt;code class=&quot;highlighter-rouge&quot;&gt;a=10&lt;/code&gt; and Action 3 when &lt;code class=&quot;highlighter-rouge&quot;&gt;a&amp;gt;10&lt;/code&gt;, what then? This is where &lt;code class=&quot;highlighter-rouge&quot;&gt;if-elif-elif-elif-...-else&lt;/code&gt; construct comes into the picture. Use it like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a is less than 0&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a is between 0 and 4&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a is between 4 and 10&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a is bigger than 10&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;loops&quot;&gt;Loops&lt;/h2&gt;

&lt;p&gt;Now for some loopy-loops!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reading-input&quot;&gt;Reading input&lt;/h2&gt;
&lt;p&gt;You can read input from the user using something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello mr. &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See what happens there?&lt;/p&gt;

&lt;h1 id=&quot;codechef&quot;&gt;CodeChef!&lt;/h1&gt;
&lt;p&gt;Try this link &lt;a href=&quot;https://www.codechef.com/problems/TEST&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can you solve this problem? Try writing a program for this! Please give it a try before you scroll down.&lt;/p&gt;

&lt;p&gt;It’s quite small! Here’s the solution!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So you should now &lt;strong&gt;certainly&lt;/strong&gt; create an account on CodeChef! Try submitting the solution there (don’t forget to select Python when you submit). Happy coding!&lt;/p&gt;

&lt;h1 id=&quot;c&quot;&gt;C&lt;/h1&gt;

&lt;p&gt;Create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.c&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;compiling&quot;&gt;Compiling&lt;/h2&gt;

&lt;p&gt;To actually run the code, execute the following command on the terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -o hello hello.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command tells the computer to create an executable called &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; (The part after &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt;) using the code from the file &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now to run the executable, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;in the terminal.&lt;/p&gt;

&lt;h1 id=&quot;follow-up&quot;&gt;Follow up&lt;/h1&gt;

&lt;p&gt;Congrats on finishing up to here! If you’re now pumped up for trying out some more challenges, try your hand at the following problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codechef.com/problems/HS08TEST&quot;&gt;ATM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codechef.com/problems/FCTRL&quot;&gt;Factorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codechef.com/problems/INTEST&quot;&gt;Enormous Input Test&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codechef.com/problems/TLG&quot;&gt;The Lead Game&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; C/C++/Java is the preferred language while participating in competitive contests, as ACM ICPC does not allow Python.&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Aug 2016 04:55:00 +0000</pubDate>
        <link>http://pclub.in/pclub/2016/08/13/introworkshop16.html</link>
        <guid isPermaLink="true">http://pclub.in/pclub/2016/08/13/introworkshop16.html</guid>
        
        <category>pclub</category>
        
        
        <category>pclub</category>
        
      </item>
    
      <item>
        <title>HTML5 Game Development</title>
        <description>&lt;h1 id=&quot;html5-game-development&quot;&gt;HTML5 Game Development&lt;/h1&gt;
&lt;p&gt;For all those gaming nerds out there, there isn’t a better way to develop your gaming skills but to start from scratch of how a game works and to build your own one!&lt;br /&gt;
HTML 5 provides rich environment to create your games using Javascript and the html5 canvas object.&lt;/p&gt;

&lt;h3 id=&quot;pre-requisites&quot;&gt;PRE-REQUISITES&lt;/h3&gt;
&lt;p&gt;Well all you need is to know the basics of html and javascript. And of course a little bit of enthu in the pot is forever welcomed !  :)&lt;/p&gt;

&lt;h3 id=&quot;why-not-other-game-engines-&quot;&gt;WHY NOT OTHER GAME-ENGINES ?&lt;/h3&gt;
&lt;p&gt;We have hundreds of cool game engines in the market, to name few unity,unreal engine, cryengine, source 2 etc. But here we focus on learning things from the scratch, in engines like these things are more  drag and drop and the essence of how things work from the basic fails to deliver. In this article we discuss things from the very basic !&lt;/p&gt;

&lt;h3 id=&quot;game-canvas-and-game-components&quot;&gt;GAME CANVAS AND GAME COMPONENTS&lt;/h3&gt;
&lt;p&gt;Without much ado, we talk about the canvas object in the html 5 that offers to us the work place for doing all our cool gaming stuffs. To note is that it is a container to hold the graphics content and nothing more. Everything that needs to be done must be defined beforehand unlike the game engines like unity which have predefined objects like planes, spheres etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Game Components&lt;/strong&gt;
We can draw rectangles, circles, lines using the 2D context of canvas object (in layman’s term - drawing in the canvas holder by using its 2 Dimensional object ).We can provide colors to fill, or use gradient colors, or even load images to make animations in the 2d context of canvas object.&lt;/p&gt;

&lt;p&gt;Reference Code in js-&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;canvas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This creates a color filled red rectangle in the canvas at (10,20) coordinates of 30px as width and 40px as height.&lt;/p&gt;

&lt;h3 id=&quot;game-components-and-their-movement&quot;&gt;GAME COMPONENTS AND THEIR MOVEMENT&lt;/h3&gt;
&lt;p&gt;The importance of these objects is that they can be moved inside the canvas by redrawing them to different positions, this being done per frame ! A separate function is created which helps in drawing the components taking the position as arguments that is called many times a second to update the position of the game components.The position can incremented each time adding a constant or a uniformly increasing function to make the component move uniformly or accelerate respectively.&lt;br /&gt;
The movement is triggered also by adding event handlers through javascript, like “keydown”, “keyup” for keyboard keys, which then can be recognised using the keyCode attribute of the event argument of event -handler function call (see attached reference code).&lt;/p&gt;

&lt;p&gt;Reference Code in js-&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;keydown&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
	    &lt;span class=&quot;nx&quot;&gt;myGameArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;//for calling a function callMe at 50 every milliseconds (or  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//better say 20 frames per second)  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//setInterval(callMe,50); &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hence by knowing which key is pressed we can call the required functions for action to be taken.&lt;/p&gt;

&lt;h3 id=&quot;game-obstacles-and-score&quot;&gt;GAME OBSTACLES AND SCORE&lt;/h3&gt;
&lt;p&gt;Like other game components game obstacles are also game components but being generated at random coordinates of random shape, the code of which is much the same and i leave it to you :) .&lt;br /&gt;
The score in most of the cases is decided by certain collision events or by the current frame from the beginning of the game.
Its very easy to ascertain the collision between objects exploiting the again the boundary coordinates, and the current frame can be known by ensuring a  counter that is incremented for the function that is called per frame.I leave the job for you to google out the way to write text in canvas element to display the score when needed.&lt;/p&gt;

&lt;h3 id=&quot;almost-there-&quot;&gt;ALMOST THERE !&lt;/h3&gt;
&lt;p&gt;We  have known  everything to create our first simple html5 game with our own game arena and game components, game obstacles and score to compete !&lt;/p&gt;

&lt;h3 id=&quot;lonely-without-sounds-&quot;&gt;LONELY WITHOUT SOUNDS ?&lt;/h3&gt;
&lt;p&gt;Well everyone loves the charm when there’s music in the air ! Luckily we can have it too in case of html5 “audio” object . Not going into much detail, we can add sound using the following sample code link, which i leave you to dissect.&lt;/p&gt;

&lt;h3 id=&quot;links-and-further-reading&quot;&gt;LINKS AND FURTHER READING&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://home.iitk.ac.in/~akashdut/sounddev.txt&quot;&gt;Adding sounds&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udacity.com/course/html5-game-development--cs255&quot;&gt;Udacity course on html5 game dev&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udacity.com/course/html5-canvas--ud292&quot;&gt;Udacity course on html5 canvas element&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/games/default.asp&quot;&gt;W3schools tutorial for html game&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 27 Jul 2016 10:35:20 +0000</pubDate>
        <link>http://pclub.in/tutorial/2016/07/27/html5gamedev.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/2016/07/27/html5gamedev.html</guid>
        
        <category>tutorial</category>
        
        <category>game dev</category>
        
        <category>html5</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Smart Mirror</title>
        <description>&lt;h1 id=&quot;smart-mirrorhttp11000011githubiosmart-mirror&quot;&gt;&lt;a href=&quot;http://11000011.github.io/Smart-Mirror/&quot;&gt;Smart Mirror&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Smart Mirror is a project designed to get you ready for the day. It displays
the current weather, your schedule for the day, notifications from your mobile
and performs facial recognition so that the same software works for all users
using the mirror.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/11000011/Smart-Mirror/raw/gh-pages/img/sample.png&quot; alt=&quot;image&quot; /&gt;
^ The above image will be superimposed over the reflection from mirror displaying only the bright portions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Weather is obtained using your current location&lt;/li&gt;
  &lt;li&gt;Schedule is obtained from Google Calendar&lt;/li&gt;
  &lt;li&gt;Notifications are mirrored from the user’s mobile phone via PushBullet&lt;/li&gt;
  &lt;li&gt;Facial Recognition ensures that notifications/schedule displayed are those of the person standing in front of the mirror&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Received the &lt;strong&gt;Best Applicative Project&lt;/strong&gt; during the Science &amp;amp; Technology Summer
Camp 2016.&lt;/p&gt;

&lt;p&gt;Website: &lt;a href=&quot;http://11000011.github.io/Smart-Mirror&quot;&gt;http://11000011.github.io/Smart-Mirror&lt;/a&gt;&lt;br /&gt;
LaTeX Report: &lt;a href=&quot;http://github.com/11000011/Smart-Mirror/raw/gh-pages/report.pdf&quot;&gt;report.pdf&lt;/a&gt;&lt;br /&gt;
Github Wiki: &lt;a href=&quot;http://github.com/11000011/Smart-Mirror/wiki/&quot;&gt;Smart Mirror Wiki&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jul 2016 11:12:00 +0000</pubDate>
        <link>http://pclub.in/project/2016/07/06/smartmirror.html</link>
        <guid isPermaLink="true">http://pclub.in/project/2016/07/06/smartmirror.html</guid>
        
        <category>summer16</category>
        
        <category>project</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Managing Processes in Linux</title>
        <description>&lt;h1 id=&quot;managing-processes-in-linux&quot;&gt;Managing Processes in Linux&lt;/h1&gt;

&lt;h3 id=&quot;the-ps-command&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ps&lt;/code&gt; command&lt;/h3&gt;
&lt;p&gt;Short for &lt;strong&gt;&lt;em&gt;process status&lt;/em&gt;&lt;/strong&gt; . Returns all &lt;em&gt;currently running processes&lt;/em&gt; running on the system.&lt;/p&gt;

&lt;p&gt;When called without arguments, information return can be a little useless.&lt;/p&gt;

&lt;p&gt;To get a more clear picture we use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -aux&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;This tells &lt;code class=&quot;highlighter-rouge&quot;&gt;ps&lt;/code&gt;  to return list of process from &lt;strong&gt;all users&lt;/strong&gt;
We can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -ef&lt;/code&gt; to view &lt;strong&gt;all running process&lt;/strong&gt;
where &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;is used to &lt;strong&gt;display all processes&lt;/strong&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; is used to &lt;strong&gt;display in full format listing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To view all running processes that belongs to a particular user, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -f -u username1,username2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We can see processes limited to a set of users by seperating the usernames by a comma()
Often &lt;code class=&quot;highlighter-rouge&quot;&gt;ps aux | grep commandname&lt;/code&gt; is used to get details of process with the given command&lt;/p&gt;

&lt;p&gt;To see all proccesses in a tree structure we use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps axjf&lt;/code&gt;
Using this we get to know the parent processes (by getting an hierarchical structure)&lt;/p&gt;

&lt;h3 id=&quot;pids&quot;&gt;PIDs&lt;/h3&gt;

&lt;p&gt;Each process is assigned a &lt;em&gt;unique&lt;/em&gt; &lt;strong&gt;Process ID (PID)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each process also has a &lt;strong&gt;Parent Process ID (PPID)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To filter your searches with a specific &lt;strong&gt;PID&lt;/strong&gt; use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -f -p PIDofProcess&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Similarly to filter by PPID use &lt;code class=&quot;highlighter-rouge&quot;&gt;ps -f --ppid PPIDofProcess&lt;/code&gt;
Also you may get pid by &lt;code class=&quot;highlighter-rouge&quot;&gt;pidof commandname&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;killing-the-process&quot;&gt;Killing the process&lt;/h3&gt;

&lt;h4 id=&quot;the-kill-command&quot;&gt;The kill command&lt;/h4&gt;

&lt;p&gt;It is used to send a signal to a process or to kill a process&lt;/p&gt;

&lt;p&gt;Basic Synatx is &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -SIGNAL PID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signals of our interest&lt;/strong&gt; : SIGTERM &amp;amp; SIGKILL&lt;/p&gt;

&lt;h4 id=&quot;sigterm&quot;&gt;SIGTERM&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kill PID&lt;/code&gt; will send a SIGTERM signal by default. The application can determine what to do once it receives a SIGTERM signal&lt;/p&gt;

&lt;p&gt;It may stop the process immediately, may stop after a delay after cleaning resources or might run endlessly&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -SIGTERM PID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -15 PID&lt;/code&gt; are same&lt;/p&gt;

&lt;h4 id=&quot;sigkill-the-super-power&quot;&gt;SIGKILL (The Super Power)&lt;/h4&gt;

&lt;p&gt;Kind of Force Kill&lt;/p&gt;

&lt;p&gt;Unlike SIGTERM , SIGKILL cannot be ignored by the process , even the process is not aware when SIGKILL signal is sent.&lt;/p&gt;

&lt;p&gt;While there are rare cases where an external influence (like waiting I/O) may be the reason of ignoring SIGKILL. But it works in most cases ! 
&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -SIGKILL PID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -9 PID&lt;/code&gt; is same&lt;/p&gt;

&lt;p&gt;Suppose your firefox is not responding and you decided to kill the process : &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -9 `pidof firefox`&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-killall-command&quot;&gt;The killall command&lt;/h4&gt;

&lt;p&gt;Too lazy to find the PID of a process ? Here have a look at the killall command&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example (killing firefox)&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;killall -9 firefox&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pkill command&lt;/strong&gt;
Almost the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;kilall&lt;/code&gt; command. The only difference being you don’t have to provide the exact process name, partial process name will do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beware you might also kill other process which you didn’t intend to kill&lt;/strong&gt;
&lt;em&gt;Example (killing firefox)&lt;/em&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;pkill firef&lt;/code&gt; will also do ! :D&lt;/p&gt;

&lt;h4 id=&quot;the-xkill-command&quot;&gt;The xkill command&lt;/h4&gt;

&lt;p&gt;If you are new to using &lt;strong&gt;LINUX&lt;/strong&gt; or hate the bash, you may do it the GUI way :P&lt;/p&gt;

&lt;p&gt;Simply  type &lt;code class=&quot;highlighter-rouge&quot;&gt;xkill&lt;/code&gt; in the terminal and it will ask you to select a window whose client you wish to kill.&lt;/p&gt;

&lt;p&gt;Fast if you have a GUI :P&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have fun killing !!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fin&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jun 2016 16:06:00 +0000</pubDate>
        <link>http://pclub.in/tutorial/2016/06/01/linuxprocess.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/2016/06/01/linuxprocess.html</guid>
        
        <category>linux</category>
        
        <category>bash</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Image Processing using OpenCV</title>
        <description>&lt;p&gt;OpenCV is the most widely used Computer Vision Library out there. It is
very powerful and offers many features suiting the needs of anyone requiring
Image Processing. This tutorial is a slightly modified version of
&lt;a href=&quot;http://students.iitk.ac.in/robocon/docs/doku.php?id=programming:image_processing_intro&quot;&gt;this&lt;/a&gt;
with a simpler method of compiling.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;The simplest possible install is always from the repositories.&lt;/p&gt;

&lt;p&gt;For Debian/Ubuntu/Mint:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libopencv-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For Other distros like Arch, you can find the respective commands on the internet.&lt;/p&gt;

&lt;p&gt;If you want python support too, you will need to install the python support by:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-opencv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The repository versions of OpenCV are usually not the latest versions and you might miss
some features.&lt;/p&gt;

&lt;p&gt;If you need specific features or a newer version of OpenCV (let’s say for python3 support),
you could look &lt;a href=&quot;milq.github.io/install-opencv-ubuntu-debian&quot;&gt;here&lt;/a&gt; for a very good guide
on compiling OpenCV from source.&lt;/p&gt;

&lt;h2 id=&quot;compiling-and-running-programs-in-c&quot;&gt;Compiling and running Programs in C++&lt;/h2&gt;

&lt;p&gt;Now that OpenCV has been installed, you might want to run a program to see if it is working
properly. I would suggest the following program:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;opencv2/opencv.hpp&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// A camera object
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;VideoCapture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// An image object
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Storing a frame from camera to image
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;cam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Do Your Operations Here
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Displaying image in a window named &quot;Image&quot;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Waiting for a keypress for 5ms
&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
      * WaitKey is very important.
      * Even if you don&#39;t want a delay/keypress you should
      * use it with minimum delay otherwise, the gui does not update
      */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Quit on pressing q
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;q&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#39;Q&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This simple program just takes input from your webcam and displays it in a window.
You can save it in a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;test.cpp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, in order to compile this program, execute this from the terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ -o Test /path/to/test.cpp &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;pkg-config --libs opencv&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The parameter after &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt;, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;Test&lt;/code&gt; refers to the name of the executable created after compiling.&lt;/p&gt;

&lt;p&gt;After compilation finishes (hopefully without any errors), you can run this test program with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./Test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For a more involved and complex compilation involving &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;, you can look
&lt;a href=&quot;http://students.iitk.ac.in/robocon/docs/doku.php?id=programming:image_processing_intro&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_gcc_cmake/linux_gcc_cmake.html#linux-gcc-usage&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;learning-opencv&quot;&gt;Learning OpenCV&lt;/h2&gt;

&lt;p&gt;Now that you can compile and execute OpenCV programs, you are ready to begin learning OpenCV.
The OpenCV &lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/tutorials.html&quot;&gt;tutorials&lt;/a&gt; on their website is a
good starting point. My suggested order of reading is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/introduction/display_image/display_image.html#display-image&quot;&gt;Load and display an image&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/core/adding_images/adding_images.html#adding-images&quot;&gt;Adding Images&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/core/basic_geometric_drawing/basic_geometric_drawing.html#drawing-1&quot;&gt;Basic Drawing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Followed by all tutorials in the &lt;a href=&quot;http://docs.opencv.org/2.4/doc/tutorials/imgproc/table_of_content_imgproc/table_of_content_imgproc.html#table-of-content-imgproc&quot;&gt;Image Processing Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above order is because the initial tutorials tend to be more theoretical and focussing on the internals of OpenCV
rather than actual usage.&lt;/p&gt;

&lt;p&gt;Plus, you might not need to see all the tutorials depending upon your needs.&lt;/p&gt;

&lt;p&gt;Best of Luck developing your OpenCV application.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 May 2016 12:18:35 +0000</pubDate>
        <link>http://pclub.in/tutorial/ip/2016/05/28/opencv.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/ip/2016/05/28/opencv.html</guid>
        
        <category>ip</category>
        
        <category>tutorial</category>
        
        
        <category>tutorial</category>
        
        <category>ip</category>
        
      </item>
    
      <item>
        <title>AngularJS --- Superheroic Javascript Framework</title>
        <description>&lt;h3 id=&quot;angularjs-superheroic-javascript-framework&quot;&gt;AngularJS: Superheroic Javascript Framework&lt;/h3&gt;

&lt;p&gt;For all those who have worked with HTML and CSS, you know very well that HTML is great for declaring static documents. It doesn’t do so &lt;strong&gt;well&lt;/strong&gt; for declaring dynamic views in web-applications. Angular lets us create expressive, readable, quick to develop dynamic web pages. AngularJS framework is written in &lt;em&gt;Javascript&lt;/em&gt;. In this article, I’m going to be introducing you to very basic AngularJS, essentially talking about directives, expressions, controllers, data binding and filters.&lt;/p&gt;

&lt;h4 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Elementary&lt;/strong&gt; knowledge about HTML, CSS and Javascript.&lt;/li&gt;
  &lt;li&gt;Desire to develop responsive and dynamic web pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;angular-directives&quot;&gt;Angular Directives&lt;/h4&gt;
&lt;p&gt;Let us begin now. We’ll start with a website, albeit a simple one, that IITK’s alumni have &lt;a href=&quot;http://sid17.github.io/iitky12/#/&quot;&gt;made&lt;/a&gt;. The purpose of this website is for Y12 batch to stay in touch with batch mates and know the whereabouts of Y12 junta. A brilliant idea. We won’t be talking about the backend that is how the data is added and how the website fetches the data.&lt;/p&gt;

&lt;p&gt;Now if you right click anywhere on the site and chose inspect element, a small window opens in your browser. Find the body tag and you would find something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body ng-app=&#39;iitky12App&#39; ng-init=&#39;loadSettings()&#39; ng-controller=&#39;AppCtrl&#39; class=&#39;ng-scope&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what exactly is ng-app, ng-init and ng-controller?
These are the angular &lt;strong&gt;directives&lt;/strong&gt;. Directives are markers on a DOM (Document Object Model) element (such as an attribute, element name, comment or CSS class) that tell AngularJS’s HTML compiler to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.
Some common directives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;ng-app&lt;/strong&gt; directive tells AngularJS that the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element is the “owner” of an AngularJS application.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;ng-init&lt;/strong&gt; directive initializes AngularJS application variables.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;ng-model&lt;/strong&gt; directive binds the value of HTML controls (input, select, textarea) to application data. The ng-model directive provides a two-way binding between the model and the view.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;ng-repeat&lt;/strong&gt; directive actually clones HTML elements once for each item in a collection. Consider this like a loop for HTML elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;angular-expressions&quot;&gt;Angular Expressions&lt;/h4&gt;

&lt;p&gt;AngularJS binds data to HTML using &lt;strong&gt;Expressions&lt;/strong&gt;.AngularJS expressions can be written inside double braces:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{ expression }}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you remove the ng-app directive, HTML will display the expression as it is, without solving it.&lt;/p&gt;

&lt;h4 id=&quot;two-way-data-binding&quot;&gt;Two Way Data binding&lt;/h4&gt;

&lt;p&gt;Data binding in AngularJS is the synchronization between the model and the view. When data in the model changes, the view reflects the change, and when data in the view changes, the modelis updated as well. This happens immediately and automatically, which makes sure that the model and the view is updated at all times. ng-model directive mentioned earlier, is used for two way data binding.&lt;/p&gt;

&lt;h4 id=&quot;angular-controllers&quot;&gt;Angular Controllers&lt;/h4&gt;

&lt;p&gt;AngularJS controllers control the data of AngularJS applications. AngularJS controllers are regular JavaScript Objects. AngularJS applications are controlled by controllers. The ng-controller directive defines the application controller. Like in the site mentioned in the beginning, in the body tag &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-controller=&#39;AppCtrl&#39;&lt;/code&gt; has been used. This means AppCtrl is defined as the application controller.&lt;/p&gt;

&lt;h4 id=&quot;angular-filters&quot;&gt;Angular Filters&lt;/h4&gt;

&lt;p&gt;Perhaps again we should visit the site I mentioned earlier. Let us type CSE in the search bar ( :P ). Without taking any time, we get the results which have CSE linked to them. How does this happen?&lt;/p&gt;

&lt;p&gt;Angular Filters!! They give us the ability to format and filter the output according to our needs. So by using two way data binding we are able to use the search text entered and then filter the database using Angular Filters. We can also use filters to Order the results. Here is the link to the &lt;a href=&quot;https://docs.angularjs.org/guide/filter&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;supporting-links&quot;&gt;Supporting Links&lt;/h4&gt;

&lt;p&gt;So I guess this is enough for a start. There is much to learn, but perhaps that would be covered in another article. I present to you a few useful links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/angular-js/home/welcome&quot;&gt;Coursera Course on AngularJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular JS Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/angular/&quot;&gt;W3Schools Tutorial on Angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 27 May 2016 19:05:23 +0000</pubDate>
        <link>http://pclub.in/angularjs/web%20development/2016/05/27/angular.html</link>
        <guid isPermaLink="true">http://pclub.in/angularjs/web%20development/2016/05/27/angular.html</guid>
        
        <category>web development</category>
        
        <category>javascript</category>
        
        <category>angularjs</category>
        
        
        <category>angularjs</category>
        
        <category>web development</category>
        
      </item>
    
      <item>
        <title>Introduction to R (Part 1)</title>
        <description>&lt;h1 id=&quot;basics-of-r&quot;&gt;Basics Of R&lt;/h1&gt;

&lt;h3 id=&quot;why-learn-r-&quot;&gt;Why Learn R ?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Free, Open Source, Cross Platform Compatible&lt;/li&gt;
  &lt;li&gt;No &lt;em&gt;Windows&lt;/em&gt;, No Doors – R runs on all the platforms. Just name it and you got it!!&lt;/li&gt;
  &lt;li&gt;R is a language evolved from the &lt;strong&gt;Language&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;S&lt;/em&gt;&lt;/strong&gt; (&lt;em&gt;created by Bell Technologies&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;I bet plotting graphs could never have been easier&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is the leading open source statistical and data analysis programming language,  as it handles and manipulates data too efficiently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;I personally recommend you to use R on &lt;em&gt;UNIX&lt;/em&gt; machines . I haven’t tried it on &lt;em&gt;Windows&lt;/em&gt; yet :P&lt;/li&gt;
  &lt;li&gt;Still not convinced ? &lt;a href=&quot;http://blog.revolutionanalytics.com/2012/07/a-big-list-of-the-things-r-can-do.html&quot;&gt;Here&lt;/a&gt; is a list of things that R can do . Keep Counting !!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Having Fun with R&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudoku&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sudoku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readSudoku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:/hard sudoku problem.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solveSudoku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wondering what the above 4 lines of code can do ? Well It can solve the &lt;strong&gt;hardest&lt;/strong&gt; &lt;em&gt;Soduku Puzzle&lt;/em&gt; ever made ! Sounds Cool ?&lt;/p&gt;

&lt;p&gt;Google &lt;strong&gt;&lt;em&gt;“Making a word cloud in R”&lt;/em&gt;&lt;/strong&gt; and see how easy it is !&lt;/p&gt;

&lt;h2 id=&quot;some-pre-requiste-knowledge&quot;&gt;Some Pre Requiste Knowledge&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;How to start R ?&lt;/li&gt;
  &lt;li&gt;Will their be an IDE where I can code ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The installation instructions for various platforms (including Non &lt;em&gt;UNIX&lt;/em&gt; products) can be found &lt;a href=&quot;https://cran.r-project.org/doc/manuals/r-release/R-admin.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After Installation. Just open your terminal and type &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-important-things-first&quot;&gt;&lt;strong&gt;Some important things first&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Whenever you are done with this language or simply wanna quit this Just type &lt;code class=&quot;highlighter-rouge&quot;&gt;q()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Whenever you are struck anywhere just type &lt;code class=&quot;highlighter-rouge&quot;&gt;help(commandname)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; is an expression language and is &lt;em&gt;case sensitive&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“R” &amp;amp; “r” are two different things&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Whenever you type an expression, the value is &lt;strong&gt;calculated , printed and lost&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;You better save the results of your expressions in a variable&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;strong&gt;assignment&lt;/strong&gt; also evaluates an expression and passes the value to a variable but the result is &lt;strong&gt;&lt;em&gt;not automatically printed&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Comments can be put anywhere starting with a Hashmark ( &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; )&lt;/li&gt;
  &lt;li&gt;Commands are separated either by a &lt;strong&gt;&lt;em&gt;semi-colon&lt;/em&gt;&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; or by a &lt;strong&gt;&lt;em&gt;newline&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If your command is incomplete R by default will give a &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; prompt and will continue to give a &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; prompt until your syntax is corrected.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;NaN&lt;/em&gt;&lt;/strong&gt; stands for Not a Number&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;programming-in-r-finally&quot;&gt;&lt;strong&gt;&lt;em&gt;Programming in R Finally&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;After reading so much about &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; . It’s time to really start coding&lt;/p&gt;

&lt;h4 id=&quot;loading-commands-in-r&quot;&gt;Loading commands in R&lt;/h4&gt;

&lt;p&gt;If you already have a .R extension file with certain commands already written , you can load it with the following syntax&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source(“nameofthefile&quot;.R)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wanna store all the outputs for a particular session ?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sink (“nameoffile”)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Simliar to a &lt;em&gt;UNIX&lt;/em&gt; terminal you can type &lt;code class=&quot;highlighter-rouge&quot;&gt;ls()&lt;/code&gt; to view all the objects you created in &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; for a particular session.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The collection of objects currently stored is called the &lt;strong&gt;&lt;em&gt;workspace&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How to remove an object ?&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;rm(objectname1,objectname2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Removing all objects&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Try to understand this command on your own.It’s pretty easy&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;data-types&quot;&gt;Data Types&lt;/h4&gt;

&lt;p&gt;Used Python ? &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; might look familiar!&lt;/p&gt;

&lt;p&gt;You can do mathematical operations like&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1+1&lt;/code&gt; : Prints 2&lt;/p&gt;

&lt;p&gt;Time to make vectors!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; : name of the variable where the vector is stored&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; &amp;lt;-&lt;/code&gt;  :  assignment operator (points in direction of the variable in which value is to be updated/stored)&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c()&lt;/code&gt; : a function used to concatenate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
Here you can see different ways to defining the same string.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1:9&lt;/code&gt; :   Creates sequence : &lt;strong&gt;1 2 3 4 5 6 7 8 9&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.5:10&lt;/code&gt; Creates sequence : &lt;strong&gt;1.5 2.5 3.5 4.5 5.5 6.5 7.5 8.5 9.5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;seq(intial,final,by,length)&lt;/code&gt; : Function use to create sequence; we can provide increment values or number of values&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rep()&lt;/code&gt;:  Function used for Replicating&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Output&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;seq(1,5,by=1.5)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;1.0 2.5 4.0&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;seq(1,5,length=9)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rep(10,10)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;10 10 10 10 10 10 10 10 10 10&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Try it yourself&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try to understand the code snippet below, guess the output and then run on &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; and check&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;operations-on-vector&quot;&gt;Operations on vector&lt;/h4&gt;

&lt;p&gt;You can do almost all possible arithemetic operations on a vector
Adding 2 vectors of same size, different size, multiplying, dividing, &lt;code class=&quot;highlighter-rouge&quot;&gt;log()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;exp()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;sin()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sum()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;length()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;var()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;mean()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;max()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;min()&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;pmin and pmax&lt;/strong&gt; :Returns parallel max and min of input values&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Example&lt;/em&gt;
Run these commands and you will get a clear idea of pmin and pmax&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To intialize a vector with a value &lt;code class=&quot;highlighter-rouge&quot;&gt;numeric()&lt;/code&gt; is used&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a &amp;lt;- numeric(10)` : a has now value 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;An Intersting Thing to Note&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try the following commands&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should now see &lt;strong&gt;NA’s&lt;/strong&gt; in the vector&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NA&lt;/strong&gt; stands for Not Available&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NA&lt;/em&gt;&lt;/strong&gt; : Missing values are represented by the symbol NA (not available)&lt;/p&gt;

&lt;p&gt;How to check for &lt;strong&gt;NA&lt;/strong&gt; in a vector ? : &lt;code class=&quot;highlighter-rouge&quot;&gt;is.na()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is.na&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;check will be &lt;strong&gt;FALSE&lt;/strong&gt; for non NA values and &lt;strong&gt;TRUE&lt;/strong&gt; for NA values&lt;/p&gt;

&lt;p&gt;How to remove &lt;strong&gt;NA&lt;/strong&gt; values ? Let’s substitute NA with -1
&lt;code class=&quot;highlighter-rouge&quot;&gt;test[is.na(test)] &amp;lt;- -1&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;logical-vectors&quot;&gt;LOGICAL VECTORS&lt;/h4&gt;
&lt;p&gt;Can contain &lt;strong&gt;TRUE&lt;/strong&gt; or &lt;strong&gt;FALSE&lt;/strong&gt;.  What else ? &lt;strong&gt;NA&lt;/strong&gt; : Don’t forget this :P&lt;/p&gt;

&lt;p&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;test &amp;lt;- 5&amp;lt;6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operations on Logical Vectors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;: For Negation&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; : for &lt;em&gt;Logical AND&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt; : for &lt;em&gt;LOGICAL OR&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;determining-the-type-of-a-variable&quot;&gt;Determining the type of a variable&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;typeof(variablename)&lt;/code&gt; : Return the type of variable
&amp;gt; Check out &lt;code class=&quot;highlighter-rouge&quot;&gt;mode()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;class()&lt;/code&gt; and read about the difference between the three&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We will discuss this in the next part :D&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&quot;mathematical-basic-operations&quot;&gt;Mathematical Basic Operations&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Syntax&lt;/th&gt;
      &lt;th&gt;Operation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt(a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the square root of &lt;strong&gt;&lt;em&gt;a&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exp(a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Return the value of exponent of &lt;strong&gt;&lt;em&gt;a&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;log(a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns the Logarithm base &lt;strong&gt;e&lt;/strong&gt; of &lt;strong&gt;&lt;em&gt;a&lt;/em&gt;&lt;/strong&gt; Try &lt;code class=&quot;highlighter-rouge&quot;&gt;log10()&lt;/code&gt; for base &lt;strong&gt;10&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns Variance of a vector which is passed as an argument&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sd()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Returns	Standard Deviation of a vector which is passed as an argument&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note : Providing an input to a function outside it’s domain will result in NaN &lt;strong&gt;&lt;em&gt;Not a Number&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;strings&quot;&gt;Strings&lt;/h4&gt;

&lt;p&gt;Also called &lt;strong&gt;&lt;em&gt;Character Vectors&lt;/em&gt;&lt;/strong&gt; follow &lt;strong&gt;C&lt;/strong&gt; type escape character &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Combining Characters to Numbers !&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test &amp;lt;- paste(c(&quot;X,&quot;Y&quot;),1:10,sep=&quot;&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Output should look like &lt;strong&gt;&lt;em&gt;“X1”  “Y2”  “X3”  “Y4”  “X5”  “Y6”  “X7”  “Y8”  “X9”  “Y10”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;paste()&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Function takes an arbitrary number of arguments and concatenates them one by
one into character strings.&lt;/p&gt;

  &lt;p&gt;The arguments are by default separated in the result by a single blank character, but this can be
changed by the named argument, &lt;code class=&quot;highlighter-rouge&quot;&gt;sep=&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;That’s all for the Part 1 :D , We will be posting Part 2 soon&lt;/em&gt;&lt;/strong&gt;
** We will look into arrays, factors, table, matrix, data frames in the next part **&lt;/p&gt;
</description>
        <pubDate>Wed, 25 May 2016 16:36:00 +0000</pubDate>
        <link>http://pclub.in/tutorial/2016/05/25/rpart1.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/2016/05/25/rpart1.html</guid>
        
        <category>R</category>
        
        <category>Summers</category>
        
        <category>Analytics</category>
        
        <category>Data Plotting</category>
        
        <category>Statistics</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Setting up a CI for pclub.in</title>
        <description>&lt;p&gt;To begin with, I urge you to have a look at &lt;a href=&quot;https://github.com/pclubiitk/pclub.in&quot;&gt;our Github repo&lt;/a&gt; for this website.
Sure, Github serves the purpose of keeping our code public and accessible, and also lets users open issues and pull requests for the same.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://assets-cdn.github.com/images/modules/logos_page/Octocat.png&quot; style=&quot;width: 35%; margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But more, we wanted to use Github as a medium to build the website automatically on commits to the master, and deploy the website as well.
This would mean, anyone can write a post, or fix a file using Github’s online interface, send a pull request; which can be merged online as well. At no point was there a need to download the repository, and yet, the website would build in less than 2 minutes, and be updated for public. Isn’t this cool? Hang on for how this was done.&lt;/p&gt;

&lt;h2 id=&quot;some-basic-information&quot;&gt;Some basic information&lt;/h2&gt;

&lt;p&gt;A lesser known fact is that Github also allows you to host webpages.
For instance, this website is also hosted on Github at &lt;a href=&quot;https://pclubiitk.github.io/pclub.in&quot;&gt;pclubiitk.github.io/pclub.in&lt;/a&gt;.
For this, you just need to keep your html files in a branch called &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; for a project repo, or in the master of a repo called &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;.
This is itself a big topic to cover here.&lt;/p&gt;

&lt;p&gt;An even lesser known fact is that you can use Github to build your static webpages for you automatically, using Continous Integration (CI).
This is only true for Jekyll though.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge&quot;&gt;The challenge&lt;/h2&gt;

&lt;p&gt;On deciding about setting up a CI for this website, I had several options in hand. But before that, we had several constraints as well. Some of them were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The website uses custom gems. Github’s automatic page building would not build it.&lt;/li&gt;
  &lt;li&gt;We host this website on a server inside IIT Kanpur. That server is not directly visible to the outside world, and only the HTTPS port is forwarded. So an external CI cannot send its built files to the server directly.&lt;/li&gt;
  &lt;li&gt;Deploying a local CI seemed like an overkill. Plus, IIT Kanpur’s internally deployed Gitlab wasn’t fully ready to be able to handle builds etc yet.&lt;/li&gt;
  &lt;li&gt;Even if one could somehow build the files, it would not be a direct task to get the files inside IIT Kanpur.&lt;/li&gt;
  &lt;li&gt;Providing permission to an external CI to push to the repository would require committing the private key, which is insecure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-resolution&quot;&gt;The resolution&lt;/h2&gt;

&lt;p&gt;We finally used &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; for this purpose. Travis is an online Continous Integration service, which offers to build your repositories for free, within some limits. You can customize how to build, and what else to do along with that much information. We set it up to build the code, and push it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch of the same repo.&lt;/p&gt;

&lt;h4 id=&quot;giving-travis-push-access-to-the-repository&quot;&gt;Giving travis push access to the repository&lt;/h4&gt;
&lt;p&gt;For travis to be able to push to the repo, it needed to be provided a ‘deploy-key’, a key which provides access to a repository to the person having the private counterpart of that deploy key. I generated a SSH-key pair, and added the public key to Github on this repository. As for the private, it had to be inside the repository. But then anyone could copy it and pretend to be our CI. The way out was &lt;a href=&quot;https://docs.travis-ci.com/user/encrypting-files/&quot;&gt;this&lt;/a&gt;. Turns out, Travis developers thought of this, and provided you ways to encrypt and decrypt files without storing the password anywhere. So finally, I ended up committing an encrypted version of the deploy-key, and then decrypting it inside the build machine during building. Have a look at that article to know how it can be done.&lt;/p&gt;

&lt;h4 id=&quot;deploying-to-the-branch&quot;&gt;Deploying to the branch&lt;/h4&gt;

&lt;p&gt;This was fairly easy. We make a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;, and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote ...&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; in that. We also checkout the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch. This is followed by the build. So basically, the required files get updated inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder. We add all files to git, and commit. This is then pushed to the origin, and we have the up to date build files in the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;

&lt;h4 id=&quot;getting-the-files-inside-the-server&quot;&gt;Getting the files inside the server&lt;/h4&gt;

&lt;p&gt;Since the pclub server is running blind to the world, there was no direct way for it to know that the repository has been updated. &lt;code class=&quot;highlighter-rouge&quot;&gt;webhooks&lt;/code&gt; came to the rescue here. So Github has another gem, which lets you execute arbitrary actions on events. So first, I enabled PHP on the server which is serving this website, followed by a randomly named PHP script, which checks for a valid request, and pulls the updated repository from Git.&lt;/p&gt;

&lt;p&gt;Think of it as a way to tell the machine that the code has been updated online, and it should pull in the new code. So currently, on every commit, the server will pull in the updated website. This is very convenient, as you can imagine, and simplifies the task of maintaining the website considerably.&lt;/p&gt;

&lt;p&gt;Of note, the original version of &lt;a href=&quot;https://gist.github.com/sakshamsharma/209054260cd5a55c5789e20597f8a423&quot;&gt;this Gist&lt;/a&gt; was a major help in all this.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 May 2016 23:00:20 +0000</pubDate>
        <link>http://pclub.in/pclub/2016/05/13/pclubci.html</link>
        <guid isPermaLink="true">http://pclub.in/pclub/2016/05/13/pclubci.html</guid>
        
        <category>meta</category>
        
        
        <category>pclub</category>
        
      </item>
    
      <item>
        <title>NERDCommenter</title>
        <description>&lt;h1 id=&quot;plugin-nerdcommenterhttpsgithubcomscrooloosenerdcommenter&quot;&gt;Plugin: &lt;a href=&quot;https://github.com/scrooloose/nerdcommenter&quot;&gt;NERDCommenter&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/scrooloose/nerdcommenter&quot;&gt;NERDCommenter&lt;/a&gt; is an awesome
plugin for commenting code. It works primarily
in the normal mode and is aimed at more efficient coding and debugging.&lt;/p&gt;

&lt;p&gt;What it does is allow you to comment out a line in any file using the
same keybindings. Let’s say you want to have the shortcut to comment
out a line as &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; because that is easy to type. Now for a block of
code, you go to a particular line and press &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;, the line gets commented.
You press &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; again, the line gets uncommented into the &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; state.
This adds a very powerful tool to your workflow allowing you comment
out as well as comment in lines very fast. You could also type something
like &lt;code class=&quot;highlighter-rouge&quot;&gt;5//&lt;/code&gt; to comment out 5 lines.&lt;/p&gt;

&lt;p&gt;This is what would happen:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Filetype&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Before&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;After&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int a = 5;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;//int a = 5;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Python&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a = 5;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#a = 5;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.vimrc&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set rnu&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;set rnu&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;For vim-plug, add the following line to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;Plug &lt;span class=&quot;s1&quot;&gt;&#39;scrooloose/nerdcommenter&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Read the &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;:help commenter&lt;/code&gt; for a complete description
of features. If you are wondering what is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;, it is a special &lt;code class=&quot;highlighter-rouge&quot;&gt;power-key&lt;/code&gt;
in vim with default value &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;. You can change it to whatever you like. Now to get
the setting we discussed before, i.e., fast commenting out and in using &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://github.com/scrooloose/nerdcommenter/blob/master/README.md&quot;&gt;README&lt;/a&gt;,
you will find that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;&lt;/code&gt; has the behaviour we want
of toggling comments. So in order to have that same command for &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;, you will
need to map &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; to it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;nmap &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;space&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
vmap &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; I map // to &amp;lt;leader&amp;gt;cs for sexy commenting instead of the normal&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; It is my own setting and you may wish to change it to &amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt; or &amp;lt;leader&amp;gt;ci&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now open up your favourite file and try this out. It is very efficient and something
very valuable to my current workflow. I have found myself pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; on someone else’s
machine to comment code ( which usually works in C :P ) many times.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;In order to understand, why we used &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt;
you might want to &lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/&quot;&gt;Learn Vimscript&lt;/a&gt;.
Its not compulsory, but it allows you to modify vim to your settings more easily.&lt;/p&gt;
</description>
        <pubDate>Mon, 09 May 2016 18:05:20 +0000</pubDate>
        <link>http://pclub.in/tutorial/vim/2016/05/09/nerdcommenter.html</link>
        <guid isPermaLink="true">http://pclub.in/tutorial/vim/2016/05/09/nerdcommenter.html</guid>
        
        <category>vim</category>
        
        <category>tutorial</category>
        
        
        <category>tutorial</category>
        
        <category>vim</category>
        
      </item>
    
  </channel>
</rss>
